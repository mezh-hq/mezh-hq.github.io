{"version":3,"file":"preview-0fed05f2.js","sources":["../../node_modules/storybook-addon-deep-controls/dist/utils/general.js","../../node_modules/storybook-addon-deep-controls/dist/utils/story.js","../../node_modules/storybook-addon-deep-controls/dist/preview.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.stringify = exports.isPojo = exports.setProperty = void 0;\nfunction setProperty(object, path, value) {\n    if (typeof object !== \"object\" || object === null) {\n        return object; // should be an object but handle if it isn't\n    }\n    const remainingPathSegments = path.split(\".\");\n    const currentTargetSegment = remainingPathSegments.shift();\n    if (!currentTargetSegment) {\n        return object; // invalid path ignore\n    }\n    if (!remainingPathSegments.length) {\n        // we have reached the last segment so set the value\n        object[currentTargetSegment] = value;\n        return object;\n    }\n    // we have more segments to go so recurse if possible\n    let nextTargetObj = object[currentTargetSegment];\n    if (nextTargetObj === undefined) {\n        // next target doesn't exist so create one in our path\n        object[currentTargetSegment] = {};\n        nextTargetObj = object[currentTargetSegment];\n        // check if we can go further\n    }\n    else if (!nextTargetObj || typeof nextTargetObj !== \"object\") {\n        return object; // cant go further, invalid path ignore the rest\n    }\n    // recurse\n    setProperty(nextTargetObj, remainingPathSegments.join(\".\"), value);\n    // need to return the original object, only the top level caller will get this\n    return object;\n}\nexports.setProperty = setProperty;\nconst POJO_PROTOTYPES = [Object.prototype, null];\n/**\n * Is the value a simple object, ie a Plain Old Javascript Object,\n * not a class instance, function, array etc which are also objects\n *\n * @internal\n */\nfunction isPojo(val) {\n    return Boolean(typeof val === \"object\" && val && POJO_PROTOTYPES.includes(Object.getPrototypeOf(val)));\n}\nexports.isPojo = isPojo;\n/**\n * @internal\n */\nfunction stringify(data) {\n    return JSON.stringify(data, replacer, 2);\n}\nexports.stringify = stringify;\nfunction replacer(inputKey, inputValue) {\n    if (inputValue === undefined) {\n        return \"[undefined]\";\n    }\n    if (typeof inputValue === \"number\") {\n        if (isNaN(inputValue)) {\n            return \"[NaN]\";\n        }\n        if (!isFinite(inputValue)) {\n            return \"[Infinity]\";\n        }\n    }\n    // any falsy values can be serialised?\n    if (!inputValue) {\n        return inputValue;\n    }\n    if (inputValue instanceof Error) {\n        return `[Error(\"${inputValue.message}\")]`;\n    }\n    if (typeof inputValue === \"function\") {\n        return `[Function:${inputValue.name || \"anonymous\"}]`;\n    }\n    if (typeof inputValue === \"symbol\") {\n        return `[${inputValue.toString()}]`;\n    }\n    if (inputValue instanceof Promise) {\n        return \"[Promise]\";\n    }\n    if (inputValue instanceof Map) {\n        const normalisedMap = {};\n        for (const [key, value] of inputValue.entries()) {\n            normalisedMap[key] = value;\n        }\n        return normalisedMap;\n    }\n    if (inputValue instanceof RegExp) {\n        return inputValue.toString();\n    }\n    if (inputValue instanceof Set) {\n        return Array.from(inputValue);\n    }\n    if (Array.isArray(inputValue)) {\n        return inputValue.map((value, index) => {\n            return replacer(`${inputKey}[${index}]`, value);\n        });\n    }\n    if (typeof inputValue === \"object\") {\n        const isPojoValue = isPojo(inputValue);\n        if (isPojoValue) {\n            return inputValue;\n        }\n        const className = inputValue.constructor.name;\n        return `[${className}]`;\n    }\n    return inputValue;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.expandObject = exports.createFlattenedArgTypes = exports.flattenObject = void 0;\nconst general_1 = require(\"./general\");\nconst PRIMITIVE_TYPE_NAMES = new Set([\"bigint\", \"boolean\", \"number\", \"string\", \"undefined\"]);\nfunction isPrimitive(value) {\n    // eslint-disable-next-line functional-core/purity\n    return PRIMITIVE_TYPE_NAMES.has(typeof value) || value === null;\n}\nfunction isNullish(value) {\n    return value === null || value === undefined;\n}\nfunction flattenObject(nestedObject, context = {\n    currentPath: \"\",\n    flatObjectOut: {},\n}) {\n    if (!(0, general_1.isPojo)(nestedObject)) {\n        return; // cant or should not flatten\n    }\n    Object.entries(nestedObject).forEach(([key, value]) => {\n        if (context.currentPath) {\n            key = `${context.currentPath}.${key}`; // nested key\n        }\n        if (!(0, general_1.isPojo)(value)) {\n            // we have reached the last value we can flatten in this branch\n            // eslint-disable-next-line functional-core/purity\n            context.flatObjectOut[key] = value;\n            return;\n        }\n        flattenObject(value, { currentPath: key, flatObjectOut: context.flatObjectOut });\n    });\n    return context.flatObjectOut;\n}\nexports.flattenObject = flattenObject;\nfunction createObjectArgType(argName) {\n    return {\n        name: argName,\n        control: { type: \"object\" },\n    };\n}\n/**\n * Removes control from the UI\n *\n * @remark We do this instead of setting \"parameters.controls.exclude\"\n * as that would overwrite the default excluded controls config\n *\n * @remark Not having an argType defined does not mean a control is not shown,\n * it just means the default one is used which could be a blank one\n * if the value doesn't have a relevant control\n *\n * @see https://storybook.js.org/docs/react/essentials/controls#disable-controls-for-specific-properties\n */\nfunction createHiddenArgType(argPath) {\n    return {\n        name: argPath,\n        table: { disable: true },\n    };\n}\nfunction createPrimitiveArgInputTypeConfig(arg) {\n    const commonConfig = { name: arg.name };\n    switch (typeof arg.value) {\n        case \"string\":\n            return {\n                ...commonConfig,\n                type: { name: \"string\" },\n                control: { type: \"text\" },\n            };\n        case \"number\":\n        case \"bigint\":\n            return {\n                ...commonConfig,\n                type: { name: \"number\" },\n                control: { type: \"number\" },\n            };\n        case \"boolean\":\n            return {\n                ...commonConfig,\n                type: { name: \"boolean\" },\n                control: { type: \"boolean\" },\n            };\n        // controls should not exist for these\n        case \"function\":\n        case \"undefined\":\n        case \"object\":\n        case \"symbol\":\n        default: {\n            const errorMessage = `Unsupported arg value type: ${typeof arg.value} for ${arg.name}`;\n            console.error(errorMessage, arg);\n            throw new Error(errorMessage);\n        }\n    }\n}\n/**\n * This covers cases where a user has defined an argType for a parent object\n * so we don't want to create controls for its children\n */\nfunction userAlreadyDefinedArgTypeForThisPath(argPath, userDefinedArgTypeNames) {\n    for (const userDefinedArgTypeName of userDefinedArgTypeNames) {\n        if (argPath.startsWith(`${userDefinedArgTypeName}.`)) {\n            return true;\n        }\n    }\n}\nfunction createFlattenedArgTypes(context) {\n    const flatInitialArgs = flattenObject(context.initialArgs ?? {});\n    const argTypes = { ...(context.argTypes ?? {}) }; // shallow clone to avoid mutating original arg types object\n    const userDefinedArgTypeNames = new Set(Object.keys(argTypes));\n    // remove argTypes for args that were flattened and don't exist now\n    for (const flattenedRootArgKey of getRootKeysThatWereFlattened(flatInitialArgs)) {\n        if (!userDefinedArgTypeNames.has(flattenedRootArgKey)) {\n            // only hide the control if the user didn't define an argType for it\n            argTypes[flattenedRootArgKey] = createHiddenArgType(flattenedRootArgKey);\n        }\n    }\n    for (const [argPath, argValue] of Object.entries(flatInitialArgs)) {\n        if (argTypes[argPath]) {\n            continue; // existing argType defined, don't override\n        }\n        if (Array.isArray(argValue)) {\n            argTypes[argPath] = createObjectArgType(argPath);\n            continue;\n        }\n        // only show editable controls, remove controls for non-primitive args\n        // or primitive nullish args without a manual argType from the UI\n        if (isNullish(argValue) || !isPrimitive(argValue)) {\n            argTypes[argPath] = createHiddenArgType(argPath);\n            continue;\n        }\n        if (userAlreadyDefinedArgTypeForThisPath(argPath, userDefinedArgTypeNames)) {\n            continue;\n        }\n        // add control for flattened primitive arg entry without existing control\n        argTypes[argPath] = createPrimitiveArgInputTypeConfig({ name: argPath, value: argValue });\n    }\n    return argTypes;\n}\nexports.createFlattenedArgTypes = createFlattenedArgTypes;\n/**\n * When a key is flattened its key wont exist in the new object e.g.\n * \"{key: {nestedKey: value}}\" becomes \"{key.nestedKey: value}\" ie the \"key\" key is removed\n *\n * This finds such keys that used to exist in the original object but do not exist after flattening\n */\nfunction getRootKeysThatWereFlattened(object) {\n    return Object.keys(object).reduce((flattenedKeys, argKey) => {\n        if (argKey.includes(\".\")) {\n            const rootArgKey = argKey.substring(0, argKey.indexOf(\".\"));\n            flattenedKeys.add(rootArgKey);\n        }\n        return flattenedKeys;\n    }, new Set());\n}\nfunction expandObject(flatObject) {\n    if (!flatObject) {\n        return; // cant expand a non-object, assumes truthy values passed in are objects\n    }\n    // NOTE: tried sorting these so the unflattened props would be first and get overwritten by the nested props\n    // but it didn't work for some reason so opted to just filter them out instead\n    const flattenedRootArgKeys = getRootKeysThatWereFlattened(flatObject);\n    return (Object.entries(flatObject)\n        // eslint-disable-next-line functional-core/purity\n        .filter(([key]) => !flattenedRootArgKeys.has(key))\n        .reduce((out, [key, value]) => {\n        return (0, general_1.setProperty)(out, key, value);\n    }, {}));\n}\nexports.expandObject = expandObject;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst story_1 = require(\"./utils/story\");\nconst preview = {\n    argsEnhancers: [\n        /**\n         * If enabled, adds initial args to fit the flattened controls\n         */\n        (context) => {\n            if (!context.parameters.deepControls?.enabled) {\n                return context.initialArgs;\n            }\n            return (0, story_1.flattenObject)(context.initialArgs);\n        },\n    ],\n    argTypesEnhancers: [\n        /**\n         * If enabled, replaces controls with flattened controls based on the initial args\n         * and these will be what the user interacts with, ie the flat args become the source of truth\n         *\n         * @remark Storybook still adds in the un-flattened args but these should be ignored\n         */\n        (context) => {\n            if (!context.parameters.deepControls?.enabled) {\n                return context.argTypes;\n            }\n            return (0, story_1.createFlattenedArgTypes)(context);\n        },\n    ],\n    decorators: [\n        /**\n         * If enabled, un-flattens the args from controls to the original format\n         * before passing them to the story component\n         */\n        (storyFn, context) => {\n            if (!context.parameters.deepControls?.enabled) {\n                return storyFn(context);\n            }\n            return storyFn({\n                ...context,\n                args: (0, story_1.expandObject)(context.args),\n                initialArgs: (0, story_1.expandObject)(context.initialArgs),\n            });\n        },\n    ],\n};\nexports.default = preview;\n"],"names":["general","setProperty","object","path","value","remainingPathSegments","currentTargetSegment","nextTargetObj","POJO_PROTOTYPES","isPojo","val","stringify","data","replacer","inputKey","inputValue","normalisedMap","key","index","story","general_1","require$$0","PRIMITIVE_TYPE_NAMES","isPrimitive","isNullish","flattenObject","nestedObject","context","createObjectArgType","argName","createHiddenArgType","argPath","createPrimitiveArgInputTypeConfig","arg","commonConfig","errorMessage","userAlreadyDefinedArgTypeForThisPath","userDefinedArgTypeNames","userDefinedArgTypeName","createFlattenedArgTypes","flatInitialArgs","argTypes","flattenedRootArgKey","getRootKeysThatWereFlattened","argValue","flattenedKeys","argKey","rootArgKey","expandObject","flatObject","flattenedRootArgKeys","out","preview_1","story_1","preview","_a","storyFn","_default"],"mappings":"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","x_google_ignoreList":[0,1,2]}