{"version":3,"file":"preview-cb1d530e.js","sources":["../../node_modules/diff-match-patch/index.js","../../node_modules/ansi-styles/index.js","../../node_modules/supports-color/browser.js","../../node_modules/jsondiffpatch/node_modules/chalk/source/util.js","../../node_modules/jsondiffpatch/node_modules/chalk/source/templates.js","../../node_modules/jsondiffpatch/node_modules/chalk/source/index.js","../../node_modules/jsondiffpatch/dist/jsondiffpatch.esm.js","../../node_modules/@dreamworld/addon-redux/dist/esm/util/jsonHelper.js","../../node_modules/@dreamworld/addon-redux/dist/esm/constants.js","../../node_modules/@dreamworld/addon-redux/dist/esm/redux/actionCreators.js","../../node_modules/@dreamworld/addon-redux/dist/esm/redux/enhancer.js","../../node_modules/@dreamworld/addon-redux/dist/esm/redux/withRedux.js","../../node_modules/@dreamworld/addon-redux/dist/esm/preset/preview.js"],"sourcesContent":["/**\n * Diff Match and Patch\n * Copyright 2018 The diff-match-patch Authors.\n * https://github.com/google/diff-match-patch\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Computes the difference between two texts to create a patch.\n * Applies the patch onto another text, allowing for errors.\n * @author fraser@google.com (Neil Fraser)\n */\n\n/**\n * Class containing the diff, match and patch methods.\n * @constructor\n */\nvar diff_match_patch = function() {\n\n  // Defaults.\n  // Redefine these in your program to override the defaults.\n\n  // Number of seconds to map a diff before giving up (0 for infinity).\n  this.Diff_Timeout = 1.0;\n  // Cost of an empty edit operation in terms of edit characters.\n  this.Diff_EditCost = 4;\n  // At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n  this.Match_Threshold = 0.5;\n  // How far to search for a match (0 = exact location, 1000+ = broad match).\n  // A match this many characters away from the expected location will add\n  // 1.0 to the score (0.0 is a perfect match).\n  this.Match_Distance = 1000;\n  // When deleting a large block of text (over ~64 characters), how close do\n  // the contents have to be to match the expected contents. (0.0 = perfection,\n  // 1.0 = very loose).  Note that Match_Threshold controls how closely the\n  // end points of a delete need to match.\n  this.Patch_DeleteThreshold = 0.5;\n  // Chunk size for context length.\n  this.Patch_Margin = 4;\n\n  // The number of bits in an int.\n  this.Match_MaxBits = 32;\n};\n\n\n//  DIFF FUNCTIONS\n\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n/**\n * Class representing one diff tuple.\n * ~Attempts to look like a two-element array (which is what this used to be).~\n * Constructor returns an actual two-element array, to allow destructing @JackuB\n * See https://github.com/JackuB/diff-match-patch/issues/14 for details\n * @param {number} op Operation, one of: DIFF_DELETE, DIFF_INSERT, DIFF_EQUAL.\n * @param {string} text Text to be deleted, inserted, or retained.\n * @constructor\n */\ndiff_match_patch.Diff = function(op, text) {\n  return [op, text];\n};\n\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean=} opt_checklines Optional speedup flag. If present and false,\n *     then don't run a line-level diff first to identify the changed areas.\n *     Defaults to true, which does a faster, slightly less optimal diff.\n * @param {number=} opt_deadline Optional time when the diff should be complete\n *     by.  Used internally for recursive calls.  Users should set DiffTimeout\n *     instead.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_main = function(text1, text2, opt_checklines,\n    opt_deadline) {\n  // Set a deadline by which time the diff must be complete.\n  if (typeof opt_deadline == 'undefined') {\n    if (this.Diff_Timeout <= 0) {\n      opt_deadline = Number.MAX_VALUE;\n    } else {\n      opt_deadline = (new Date).getTime() + this.Diff_Timeout * 1000;\n    }\n  }\n  var deadline = opt_deadline;\n\n  // Check for null inputs.\n  if (text1 == null || text2 == null) {\n    throw new Error('Null input. (diff_main)');\n  }\n\n  // Check for equality (speedup).\n  if (text1 == text2) {\n    if (text1) {\n      return [new diff_match_patch.Diff(DIFF_EQUAL, text1)];\n    }\n    return [];\n  }\n\n  if (typeof opt_checklines == 'undefined') {\n    opt_checklines = true;\n  }\n  var checklines = opt_checklines;\n\n  // Trim off common prefix (speedup).\n  var commonlength = this.diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = this.diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = this.diff_compute_(text1, text2, checklines, deadline);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, commonprefix));\n  }\n  if (commonsuffix) {\n    diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, commonsuffix));\n  }\n  this.diff_cleanupMerge(diffs);\n  return diffs;\n};\n\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean} checklines Speedup flag.  If false, then don't run a\n *     line-level diff first to identify the changed areas.\n *     If true, then run a faster, slightly less optimal diff.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_compute_ = function(text1, text2, checklines,\n    deadline) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [new diff_match_patch.Diff(DIFF_INSERT, text2)];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [new diff_match_patch.Diff(DIFF_DELETE, text1)];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i != -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [new diff_match_patch.Diff(DIFF_INSERT, longtext.substring(0, i)),\n             new diff_match_patch.Diff(DIFF_EQUAL, shorttext),\n             new diff_match_patch.Diff(DIFF_INSERT,\n                 longtext.substring(i + shorttext.length))];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n\n  if (shorttext.length == 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [new diff_match_patch.Diff(DIFF_DELETE, text1),\n            new diff_match_patch.Diff(DIFF_INSERT, text2)];\n  }\n\n  // Check to see if the problem can be split in two.\n  var hm = this.diff_halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = this.diff_main(text1_a, text2_a, checklines, deadline);\n    var diffs_b = this.diff_main(text1_b, text2_b, checklines, deadline);\n    // Merge the results.\n    return diffs_a.concat([new diff_match_patch.Diff(DIFF_EQUAL, mid_common)],\n                          diffs_b);\n  }\n\n  if (checklines && text1.length > 100 && text2.length > 100) {\n    return this.diff_lineMode_(text1, text2, deadline);\n  }\n\n  return this.diff_bisect_(text1, text2, deadline);\n};\n\n\n/**\n * Do a quick line-level diff on both strings, then rediff the parts for\n * greater accuracy.\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_lineMode_ = function(text1, text2, deadline) {\n  // Scan the text on a line-by-line basis first.\n  var a = this.diff_linesToChars_(text1, text2);\n  text1 = a.chars1;\n  text2 = a.chars2;\n  var linearray = a.lineArray;\n\n  var diffs = this.diff_main(text1, text2, false, deadline);\n\n  // Convert the diff back to original text.\n  this.diff_charsToLines_(diffs, linearray);\n  // Eliminate freak matches (e.g. blank lines)\n  this.diff_cleanupSemantic(diffs);\n\n  // Rediff any replacement blocks, this time character-by-character.\n  // Add a dummy entry at the end.\n  diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, ''));\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete >= 1 && count_insert >= 1) {\n          // Delete the offending records and add the merged ones.\n          diffs.splice(pointer - count_delete - count_insert,\n                       count_delete + count_insert);\n          pointer = pointer - count_delete - count_insert;\n          var subDiff =\n              this.diff_main(text_delete, text_insert, false, deadline);\n          for (var j = subDiff.length - 1; j >= 0; j--) {\n            diffs.splice(pointer, 0, subDiff[j]);\n          }\n          pointer = pointer + subDiff.length;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n    pointer++;\n  }\n  diffs.pop();  // Remove the dummy entry at the end.\n\n  return diffs;\n};\n\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisect_ = function(text1, text2, deadline) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = (delta % 2 != 0);\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Bail out if deadline is reached.\n    if ((new Date()).getTime() > deadline) {\n      break;\n    }\n\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (x1 < text1_length && y1 < text2_length &&\n             text1.charAt(x1) == text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (x2 < text1_length && y2 < text2_length &&\n             text1.charAt(text1_length - x2 - 1) ==\n             text2.charAt(text2_length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [new diff_match_patch.Diff(DIFF_DELETE, text1),\n          new diff_match_patch.Diff(DIFF_INSERT, text2)];\n};\n\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisectSplit_ = function(text1, text2, x, y,\n    deadline) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = this.diff_main(text1a, text2a, false, deadline);\n  var diffsb = this.diff_main(text1b, text2b, false, deadline);\n\n  return diffs.concat(diffsb);\n};\n\n\n/**\n * Split two texts into an array of strings.  Reduce the texts to a string of\n * hashes where each Unicode character represents one line.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}\n *     An object containing the encoded text1, the encoded text2 and\n *     the array of unique strings.\n *     The zeroth element of the array of unique strings is intentionally blank.\n * @private\n */\ndiff_match_patch.prototype.diff_linesToChars_ = function(text1, text2) {\n  var lineArray = [];  // e.g. lineArray[4] == 'Hello\\n'\n  var lineHash = {};   // e.g. lineHash['Hello\\n'] == 4\n\n  // '\\x00' is a valid character, but various debuggers don't like it.\n  // So we'll insert a junk entry to avoid generating a null character.\n  lineArray[0] = '';\n\n  /**\n   * Split a text into an array of strings.  Reduce the texts to a string of\n   * hashes where each Unicode character represents one line.\n   * Modifies linearray and linehash through being a closure.\n   * @param {string} text String to encode.\n   * @return {string} Encoded string.\n   * @private\n   */\n  function diff_linesToCharsMunge_(text) {\n    var chars = '';\n    // Walk the text, pulling out a substring for each line.\n    // text.split('\\n') would would temporarily double our memory footprint.\n    // Modifying text would create many large strings to garbage collect.\n    var lineStart = 0;\n    var lineEnd = -1;\n    // Keeping our own length variable is faster than looking it up.\n    var lineArrayLength = lineArray.length;\n    while (lineEnd < text.length - 1) {\n      lineEnd = text.indexOf('\\n', lineStart);\n      if (lineEnd == -1) {\n        lineEnd = text.length - 1;\n      }\n      var line = text.substring(lineStart, lineEnd + 1);\n\n      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) :\n          (lineHash[line] !== undefined)) {\n        chars += String.fromCharCode(lineHash[line]);\n      } else {\n        if (lineArrayLength == maxLines) {\n          // Bail out at 65535 because\n          // String.fromCharCode(65536) == String.fromCharCode(0)\n          line = text.substring(lineStart);\n          lineEnd = text.length;\n        }\n        chars += String.fromCharCode(lineArrayLength);\n        lineHash[line] = lineArrayLength;\n        lineArray[lineArrayLength++] = line;\n      }\n      lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  // Allocate 2/3rds of the space for text1, the rest for text2.\n  var maxLines = 40000;\n  var chars1 = diff_linesToCharsMunge_(text1);\n  maxLines = 65535;\n  var chars2 = diff_linesToCharsMunge_(text2);\n  return {chars1: chars1, chars2: chars2, lineArray: lineArray};\n};\n\n\n/**\n * Rehydrate the text in a diff from a string of line hashes to real lines of\n * text.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {!Array.<string>} lineArray Array of unique strings.\n * @private\n */\ndiff_match_patch.prototype.diff_charsToLines_ = function(diffs, lineArray) {\n  for (var i = 0; i < diffs.length; i++) {\n    var chars = diffs[i][1];\n    var text = [];\n    for (var j = 0; j < chars.length; j++) {\n      text[j] = lineArray[chars.charCodeAt(j)];\n    }\n    diffs[i][1] = text.join('');\n  }\n};\n\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\ndiff_match_patch.prototype.diff_commonPrefix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(pointerstart, pointermid) ==\n        text2.substring(pointerstart, pointermid)) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\ndiff_match_patch.prototype.diff_commonSuffix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 ||\n      text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n        text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine if the suffix of one string is the prefix of another.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of the first\n *     string and the start of the second string.\n * @private\n */\ndiff_match_patch.prototype.diff_commonOverlap_ = function(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  // Eliminate the null case.\n  if (text1_length == 0 || text2_length == 0) {\n    return 0;\n  }\n  // Truncate the longer string.\n  if (text1_length > text2_length) {\n    text1 = text1.substring(text1_length - text2_length);\n  } else if (text1_length < text2_length) {\n    text2 = text2.substring(0, text1_length);\n  }\n  var text_length = Math.min(text1_length, text2_length);\n  // Quick check for the worst case.\n  if (text1 == text2) {\n    return text_length;\n  }\n\n  // Start by looking for a single character match\n  // and increase length until no match is found.\n  // Performance analysis: https://neil.fraser.name/news/2010/11/04/\n  var best = 0;\n  var length = 1;\n  while (true) {\n    var pattern = text1.substring(text_length - length);\n    var found = text2.indexOf(pattern);\n    if (found == -1) {\n      return best;\n    }\n    length += found;\n    if (found == 0 || text1.substring(text_length - length) ==\n        text2.substring(0, length)) {\n      best = length;\n      length++;\n    }\n  }\n};\n\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n * @private\n */\ndiff_match_patch.prototype.diff_halfMatch_ = function(text1, text2) {\n  if (this.Diff_Timeout <= 0) {\n    // Don't risk returning a non-optimal diff if we have unlimited time.\n    return null;\n  }\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null;  // Pointless.\n  }\n  var dmp = this;  // 'this' becomes 'window' in a closure.\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n      var prefixLength = dmp.diff_commonPrefix(longtext.substring(i),\n                                               shorttext.substring(j));\n      var suffixLength = dmp.diff_commonSuffix(longtext.substring(0, i),\n                                               shorttext.substring(0, j));\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(j - suffixLength, j) +\n            shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [best_longtext_a, best_longtext_b,\n              best_shorttext_a, best_shorttext_b, best_common];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 4));\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 2));\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n};\n\n\n/**\n * Reduce the number of edits by eliminating semantically trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemantic = function(diffs) {\n  var changes = false;\n  var equalities = [];  // Stack of indices where equalities are found.\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastEquality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0;  // Index of current position.\n  // Number of characters that changed prior to the equality.\n  var length_insertions1 = 0;\n  var length_deletions1 = 0;\n  // Number of characters that changed after the equality.\n  var length_insertions2 = 0;\n  var length_deletions2 = 0;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n      equalities[equalitiesLength++] = pointer;\n      length_insertions1 = length_insertions2;\n      length_deletions1 = length_deletions2;\n      length_insertions2 = 0;\n      length_deletions2 = 0;\n      lastEquality = diffs[pointer][1];\n    } else {  // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_INSERT) {\n        length_insertions2 += diffs[pointer][1].length;\n      } else {\n        length_deletions2 += diffs[pointer][1].length;\n      }\n      // Eliminate an equality that is smaller or equal to the edits on both\n      // sides of it.\n      if (lastEquality && (lastEquality.length <=\n          Math.max(length_insertions1, length_deletions1)) &&\n          (lastEquality.length <= Math.max(length_insertions2,\n                                           length_deletions2))) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0,\n                     new diff_match_patch.Diff(DIFF_DELETE, lastEquality));\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        // Throw away the equality we just deleted.\n        equalitiesLength--;\n        // Throw away the previous equality (it needs to be reevaluated).\n        equalitiesLength--;\n        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n        length_insertions1 = 0;  // Reset the counters.\n        length_deletions1 = 0;\n        length_insertions2 = 0;\n        length_deletions2 = 0;\n        lastEquality = null;\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  // Normalize the diff.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n  this.diff_cleanupSemanticLossless(diffs);\n\n  // Find any overlaps between deletions and insertions.\n  // e.g: <del>abcxxx</del><ins>xxxdef</ins>\n  //   -> <del>abc</del>xxx<ins>def</ins>\n  // e.g: <del>xxxabc</del><ins>defxxx</ins>\n  //   -> <ins>def</ins>xxx<del>abc</del>\n  // Only extract an overlap if it is as big as the edit ahead or behind it.\n  pointer = 1;\n  while (pointer < diffs.length) {\n    if (diffs[pointer - 1][0] == DIFF_DELETE &&\n        diffs[pointer][0] == DIFF_INSERT) {\n      var deletion = diffs[pointer - 1][1];\n      var insertion = diffs[pointer][1];\n      var overlap_length1 = this.diff_commonOverlap_(deletion, insertion);\n      var overlap_length2 = this.diff_commonOverlap_(insertion, deletion);\n      if (overlap_length1 >= overlap_length2) {\n        if (overlap_length1 >= deletion.length / 2 ||\n            overlap_length1 >= insertion.length / 2) {\n          // Overlap found.  Insert an equality and trim the surrounding edits.\n          diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n              insertion.substring(0, overlap_length1)));\n          diffs[pointer - 1][1] =\n              deletion.substring(0, deletion.length - overlap_length1);\n          diffs[pointer + 1][1] = insertion.substring(overlap_length1);\n          pointer++;\n        }\n      } else {\n        if (overlap_length2 >= deletion.length / 2 ||\n            overlap_length2 >= insertion.length / 2) {\n          // Reverse overlap found.\n          // Insert an equality and swap and trim the surrounding edits.\n          diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n              deletion.substring(0, overlap_length2)));\n          diffs[pointer - 1][0] = DIFF_INSERT;\n          diffs[pointer - 1][1] =\n              insertion.substring(0, insertion.length - overlap_length2);\n          diffs[pointer + 1][0] = DIFF_DELETE;\n          diffs[pointer + 1][1] =\n              deletion.substring(overlap_length2);\n          pointer++;\n        }\n      }\n      pointer++;\n    }\n    pointer++;\n  }\n};\n\n\n/**\n * Look for single edits surrounded on both sides by equalities\n * which can be shifted sideways to align the edit to a word boundary.\n * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemanticLossless = function(diffs) {\n  /**\n   * Given two strings, compute a score representing whether the internal\n   * boundary falls on logical boundaries.\n   * Scores range from 6 (best) to 0 (worst).\n   * Closure, but does not reference any external variables.\n   * @param {string} one First string.\n   * @param {string} two Second string.\n   * @return {number} The score.\n   * @private\n   */\n  function diff_cleanupSemanticScore_(one, two) {\n    if (!one || !two) {\n      // Edges are the best.\n      return 6;\n    }\n\n    // Each port of this function behaves slightly differently due to\n    // subtle differences in each language's definition of things like\n    // 'whitespace'.  Since this function's purpose is largely cosmetic,\n    // the choice has been made to use each language's native features\n    // rather than force total conformity.\n    var char1 = one.charAt(one.length - 1);\n    var char2 = two.charAt(0);\n    var nonAlphaNumeric1 = char1.match(diff_match_patch.nonAlphaNumericRegex_);\n    var nonAlphaNumeric2 = char2.match(diff_match_patch.nonAlphaNumericRegex_);\n    var whitespace1 = nonAlphaNumeric1 &&\n        char1.match(diff_match_patch.whitespaceRegex_);\n    var whitespace2 = nonAlphaNumeric2 &&\n        char2.match(diff_match_patch.whitespaceRegex_);\n    var lineBreak1 = whitespace1 &&\n        char1.match(diff_match_patch.linebreakRegex_);\n    var lineBreak2 = whitespace2 &&\n        char2.match(diff_match_patch.linebreakRegex_);\n    var blankLine1 = lineBreak1 &&\n        one.match(diff_match_patch.blanklineEndRegex_);\n    var blankLine2 = lineBreak2 &&\n        two.match(diff_match_patch.blanklineStartRegex_);\n\n    if (blankLine1 || blankLine2) {\n      // Five points for blank lines.\n      return 5;\n    } else if (lineBreak1 || lineBreak2) {\n      // Four points for line breaks.\n      return 4;\n    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\n      // Three points for end of sentences.\n      return 3;\n    } else if (whitespace1 || whitespace2) {\n      // Two points for whitespace.\n      return 2;\n    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\n      // One point for non-alphanumeric.\n      return 1;\n    }\n    return 0;\n  }\n\n  var pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      var equality1 = diffs[pointer - 1][1];\n      var edit = diffs[pointer][1];\n      var equality2 = diffs[pointer + 1][1];\n\n      // First, shift the edit as far left as possible.\n      var commonOffset = this.diff_commonSuffix(equality1, edit);\n      if (commonOffset) {\n        var commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset);\n        edit = commonString + edit.substring(0, edit.length - commonOffset);\n        equality2 = commonString + equality2;\n      }\n\n      // Second, step character by character right, looking for the best fit.\n      var bestEquality1 = equality1;\n      var bestEdit = edit;\n      var bestEquality2 = equality2;\n      var bestScore = diff_cleanupSemanticScore_(equality1, edit) +\n          diff_cleanupSemanticScore_(edit, equality2);\n      while (edit.charAt(0) === equality2.charAt(0)) {\n        equality1 += edit.charAt(0);\n        edit = edit.substring(1) + equality2.charAt(0);\n        equality2 = equality2.substring(1);\n        var score = diff_cleanupSemanticScore_(equality1, edit) +\n            diff_cleanupSemanticScore_(edit, equality2);\n        // The >= encourages trailing rather than leading whitespace on edits.\n        if (score >= bestScore) {\n          bestScore = score;\n          bestEquality1 = equality1;\n          bestEdit = edit;\n          bestEquality2 = equality2;\n        }\n      }\n\n      if (diffs[pointer - 1][1] != bestEquality1) {\n        // We have an improvement, save it back to the diff.\n        if (bestEquality1) {\n          diffs[pointer - 1][1] = bestEquality1;\n        } else {\n          diffs.splice(pointer - 1, 1);\n          pointer--;\n        }\n        diffs[pointer][1] = bestEdit;\n        if (bestEquality2) {\n          diffs[pointer + 1][1] = bestEquality2;\n        } else {\n          diffs.splice(pointer + 1, 1);\n          pointer--;\n        }\n      }\n    }\n    pointer++;\n  }\n};\n\n// Define some regex patterns for matching boundaries.\ndiff_match_patch.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;\ndiff_match_patch.whitespaceRegex_ = /\\s/;\ndiff_match_patch.linebreakRegex_ = /[\\r\\n]/;\ndiff_match_patch.blanklineEndRegex_ = /\\n\\r?\\n$/;\ndiff_match_patch.blanklineStartRegex_ = /^\\r?\\n\\r?\\n/;\n\n/**\n * Reduce the number of edits by eliminating operationally trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupEfficiency = function(diffs) {\n  var changes = false;\n  var equalities = [];  // Stack of indices where equalities are found.\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastEquality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0;  // Index of current position.\n  // Is there an insertion operation before the last equality.\n  var pre_ins = false;\n  // Is there a deletion operation before the last equality.\n  var pre_del = false;\n  // Is there an insertion operation after the last equality.\n  var post_ins = false;\n  // Is there a deletion operation after the last equality.\n  var post_del = false;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n      if (diffs[pointer][1].length < this.Diff_EditCost &&\n          (post_ins || post_del)) {\n        // Candidate found.\n        equalities[equalitiesLength++] = pointer;\n        pre_ins = post_ins;\n        pre_del = post_del;\n        lastEquality = diffs[pointer][1];\n      } else {\n        // Not a candidate, and can never become one.\n        equalitiesLength = 0;\n        lastEquality = null;\n      }\n      post_ins = post_del = false;\n    } else {  // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_DELETE) {\n        post_del = true;\n      } else {\n        post_ins = true;\n      }\n      /*\n       * Five types to be split:\n       * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\n       * <ins>A</ins>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<ins>C</ins>\n       * <ins>A</del>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<del>C</del>\n       */\n      if (lastEquality && ((pre_ins && pre_del && post_ins && post_del) ||\n                           ((lastEquality.length < this.Diff_EditCost / 2) &&\n                            (pre_ins + pre_del + post_ins + post_del) == 3))) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0,\n                     new diff_match_patch.Diff(DIFF_DELETE, lastEquality));\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        equalitiesLength--;  // Throw away the equality we just deleted;\n        lastEquality = null;\n        if (pre_ins && pre_del) {\n          // No changes made which could affect previous entry, keep going.\n          post_ins = post_del = true;\n          equalitiesLength = 0;\n        } else {\n          equalitiesLength--;  // Throw away the previous equality.\n          pointer = equalitiesLength > 0 ?\n              equalities[equalitiesLength - 1] : -1;\n          post_ins = post_del = false;\n        }\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupMerge = function(diffs) {\n  // Add a dummy entry at the end.\n  diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, ''));\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete + count_insert > 1) {\n          if (count_delete !== 0 && count_insert !== 0) {\n            // Factor out any common prefixies.\n            commonlength = this.diff_commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if ((pointer - count_delete - count_insert) > 0 &&\n                  diffs[pointer - count_delete - count_insert - 1][0] ==\n                  DIFF_EQUAL) {\n                diffs[pointer - count_delete - count_insert - 1][1] +=\n                    text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n                    text_insert.substring(0, commonlength)));\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixies.\n            commonlength = this.diff_commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] = text_insert.substring(text_insert.length -\n                  commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length -\n                  commonlength);\n              text_delete = text_delete.substring(0, text_delete.length -\n                  commonlength);\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          pointer -= count_delete + count_insert;\n          diffs.splice(pointer, count_delete + count_insert);\n          if (text_delete.length) {\n            diffs.splice(pointer, 0,\n                new diff_match_patch.Diff(DIFF_DELETE, text_delete));\n            pointer++;\n          }\n          if (text_insert.length) {\n            diffs.splice(pointer, 0,\n                new diff_match_patch.Diff(DIFF_INSERT, text_insert));\n            pointer++;\n          }\n          pointer++;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop();  // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length -\n          diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] +\n            diffs[pointer][1].substring(0, diffs[pointer][1].length -\n                                        diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n          diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] =\n            diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n            diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n\n/**\n * loc is a location in text1, compute and return the equivalent location in\n * text2.\n * e.g. 'The cat' vs 'The big cat', 1->1, 5->8\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {number} loc Location within text1.\n * @return {number} Location within text2.\n */\ndiff_match_patch.prototype.diff_xIndex = function(diffs, loc) {\n  var chars1 = 0;\n  var chars2 = 0;\n  var last_chars1 = 0;\n  var last_chars2 = 0;\n  var x;\n  for (x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {  // Equality or deletion.\n      chars1 += diffs[x][1].length;\n    }\n    if (diffs[x][0] !== DIFF_DELETE) {  // Equality or insertion.\n      chars2 += diffs[x][1].length;\n    }\n    if (chars1 > loc) {  // Overshot the location.\n      break;\n    }\n    last_chars1 = chars1;\n    last_chars2 = chars2;\n  }\n  // Was the location was deleted?\n  if (diffs.length != x && diffs[x][0] === DIFF_DELETE) {\n    return last_chars2;\n  }\n  // Add the remaining character length.\n  return last_chars2 + (loc - last_chars1);\n};\n\n\n/**\n * Convert a diff array into a pretty HTML report.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} HTML representation.\n */\ndiff_match_patch.prototype.diff_prettyHtml = function(diffs) {\n  var html = [];\n  var pattern_amp = /&/g;\n  var pattern_lt = /</g;\n  var pattern_gt = />/g;\n  var pattern_para = /\\n/g;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];    // Operation (insert, delete, equal)\n    var data = diffs[x][1];  // Text of change.\n    var text = data.replace(pattern_amp, '&amp;').replace(pattern_lt, '&lt;')\n        .replace(pattern_gt, '&gt;').replace(pattern_para, '&para;<br>');\n    switch (op) {\n      case DIFF_INSERT:\n        html[x] = '<ins style=\"background:#e6ffe6;\">' + text + '</ins>';\n        break;\n      case DIFF_DELETE:\n        html[x] = '<del style=\"background:#ffe6e6;\">' + text + '</del>';\n        break;\n      case DIFF_EQUAL:\n        html[x] = '<span>' + text + '</span>';\n        break;\n    }\n  }\n  return html.join('');\n};\n\n\n/**\n * Compute and return the source text (all equalities and deletions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Source text.\n */\ndiff_match_patch.prototype.diff_text1 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n\n/**\n * Compute and return the destination text (all equalities and insertions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Destination text.\n */\ndiff_match_patch.prototype.diff_text2 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_DELETE) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n\n/**\n * Compute the Levenshtein distance; the number of inserted, deleted or\n * substituted characters.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {number} Number of changes.\n */\ndiff_match_patch.prototype.diff_levenshtein = function(diffs) {\n  var levenshtein = 0;\n  var insertions = 0;\n  var deletions = 0;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];\n    var data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        // A deletion and an insertion is one substitution.\n        levenshtein += Math.max(insertions, deletions);\n        insertions = 0;\n        deletions = 0;\n        break;\n    }\n  }\n  levenshtein += Math.max(insertions, deletions);\n  return levenshtein;\n};\n\n\n/**\n * Crush the diff into an encoded string which describes the operations\n * required to transform text1 into text2.\n * E.g. =3\\t-2\\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.\n * Operations are tab-separated.  Inserted text is escaped using %xx notation.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Delta text.\n */\ndiff_match_patch.prototype.diff_toDelta = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        text[x] = '+' + encodeURI(diffs[x][1]);\n        break;\n      case DIFF_DELETE:\n        text[x] = '-' + diffs[x][1].length;\n        break;\n      case DIFF_EQUAL:\n        text[x] = '=' + diffs[x][1].length;\n        break;\n    }\n  }\n  return text.join('\\t').replace(/%20/g, ' ');\n};\n\n\n/**\n * Given the original text1, and an encoded string which describes the\n * operations required to transform text1 into text2, compute the full diff.\n * @param {string} text1 Source string for the diff.\n * @param {string} delta Delta text.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.diff_fromDelta = function(text1, delta) {\n  var diffs = [];\n  var diffsLength = 0;  // Keeping our own length var is faster in JS.\n  var pointer = 0;  // Cursor in text1\n  var tokens = delta.split(/\\t/g);\n  for (var x = 0; x < tokens.length; x++) {\n    // Each token begins with a one character parameter which specifies the\n    // operation of this token (delete, insert, equality).\n    var param = tokens[x].substring(1);\n    switch (tokens[x].charAt(0)) {\n      case '+':\n        try {\n          diffs[diffsLength++] =\n              new diff_match_patch.Diff(DIFF_INSERT, decodeURI(param));\n        } catch (ex) {\n          // Malformed URI sequence.\n          throw new Error('Illegal escape in diff_fromDelta: ' + param);\n        }\n        break;\n      case '-':\n        // Fall through.\n      case '=':\n        var n = parseInt(param, 10);\n        if (isNaN(n) || n < 0) {\n          throw new Error('Invalid number in diff_fromDelta: ' + param);\n        }\n        var text = text1.substring(pointer, pointer += n);\n        if (tokens[x].charAt(0) == '=') {\n          diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_EQUAL, text);\n        } else {\n          diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_DELETE, text);\n        }\n        break;\n      default:\n        // Blank tokens are ok (from a trailing \\t).\n        // Anything else is an error.\n        if (tokens[x]) {\n          throw new Error('Invalid diff operation in diff_fromDelta: ' +\n                          tokens[x]);\n        }\n    }\n  }\n  if (pointer != text1.length) {\n    throw new Error('Delta length (' + pointer +\n        ') does not equal source text length (' + text1.length + ').');\n  }\n  return diffs;\n};\n\n\n//  MATCH FUNCTIONS\n\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc'.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n */\ndiff_match_patch.prototype.match_main = function(text, pattern, loc) {\n  // Check for null inputs.\n  if (text == null || pattern == null || loc == null) {\n    throw new Error('Null input. (match_main)');\n  }\n\n  loc = Math.max(0, Math.min(loc, text.length));\n  if (text == pattern) {\n    // Shortcut (potentially not guaranteed by the algorithm)\n    return 0;\n  } else if (!text.length) {\n    // Nothing to match.\n    return -1;\n  } else if (text.substring(loc, loc + pattern.length) == pattern) {\n    // Perfect match at the perfect spot!  (Includes case of null pattern)\n    return loc;\n  } else {\n    // Do a fuzzy compare.\n    return this.match_bitap_(text, pattern, loc);\n  }\n};\n\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc' using the\n * Bitap algorithm.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n * @private\n */\ndiff_match_patch.prototype.match_bitap_ = function(text, pattern, loc) {\n  if (pattern.length > this.Match_MaxBits) {\n    throw new Error('Pattern too long for this browser.');\n  }\n\n  // Initialise the alphabet.\n  var s = this.match_alphabet_(pattern);\n\n  var dmp = this;  // 'this' becomes 'window' in a closure.\n\n  /**\n   * Compute and return the score for a match with e errors and x location.\n   * Accesses loc and pattern through being a closure.\n   * @param {number} e Number of errors in match.\n   * @param {number} x Location of match.\n   * @return {number} Overall score for match (0.0 = good, 1.0 = bad).\n   * @private\n   */\n  function match_bitapScore_(e, x) {\n    var accuracy = e / pattern.length;\n    var proximity = Math.abs(loc - x);\n    if (!dmp.Match_Distance) {\n      // Dodge divide by zero error.\n      return proximity ? 1.0 : accuracy;\n    }\n    return accuracy + (proximity / dmp.Match_Distance);\n  }\n\n  // Highest score beyond which we give up.\n  var score_threshold = this.Match_Threshold;\n  // Is there a nearby exact match? (speedup)\n  var best_loc = text.indexOf(pattern, loc);\n  if (best_loc != -1) {\n    score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    // What about in the other direction? (speedup)\n    best_loc = text.lastIndexOf(pattern, loc + pattern.length);\n    if (best_loc != -1) {\n      score_threshold =\n          Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    }\n  }\n\n  // Initialise the bit arrays.\n  var matchmask = 1 << (pattern.length - 1);\n  best_loc = -1;\n\n  var bin_min, bin_mid;\n  var bin_max = pattern.length + text.length;\n  var last_rd;\n  for (var d = 0; d < pattern.length; d++) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from 'loc' we can stray at this\n    // error level.\n    bin_min = 0;\n    bin_mid = bin_max;\n    while (bin_min < bin_mid) {\n      if (match_bitapScore_(d, loc + bin_mid) <= score_threshold) {\n        bin_min = bin_mid;\n      } else {\n        bin_max = bin_mid;\n      }\n      bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);\n    }\n    // Use the result from this iteration as the maximum for the next.\n    bin_max = bin_mid;\n    var start = Math.max(1, loc - bin_mid + 1);\n    var finish = Math.min(loc + bin_mid, text.length) + pattern.length;\n\n    var rd = Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (var j = finish; j >= start; j--) {\n      // The alphabet (s) is a sparse hash, so the following line generates\n      // warnings.\n      var charMatch = s[text.charAt(j - 1)];\n      if (d === 0) {  // First pass: exact match.\n        rd[j] = ((rd[j + 1] << 1) | 1) & charMatch;\n      } else {  // Subsequent passes: fuzzy match.\n        rd[j] = (((rd[j + 1] << 1) | 1) & charMatch) |\n                (((last_rd[j + 1] | last_rd[j]) << 1) | 1) |\n                last_rd[j + 1];\n      }\n      if (rd[j] & matchmask) {\n        var score = match_bitapScore_(d, j - 1);\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (score <= score_threshold) {\n          // Told you so.\n          score_threshold = score;\n          best_loc = j - 1;\n          if (best_loc > loc) {\n            // When passing loc, don't exceed our current distance from loc.\n            start = Math.max(1, 2 * loc - best_loc);\n          } else {\n            // Already passed loc, downhill from here on in.\n            break;\n          }\n        }\n      }\n    }\n    // No hope for a (better) match at greater error levels.\n    if (match_bitapScore_(d + 1, loc) > score_threshold) {\n      break;\n    }\n    last_rd = rd;\n  }\n  return best_loc;\n};\n\n\n/**\n * Initialise the alphabet for the Bitap algorithm.\n * @param {string} pattern The text to encode.\n * @return {!Object} Hash of character locations.\n * @private\n */\ndiff_match_patch.prototype.match_alphabet_ = function(pattern) {\n  var s = {};\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] = 0;\n  }\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] |= 1 << (pattern.length - i - 1);\n  }\n  return s;\n};\n\n\n//  PATCH FUNCTIONS\n\n\n/**\n * Increase the context until it is unique,\n * but don't let the pattern expand beyond Match_MaxBits.\n * @param {!diff_match_patch.patch_obj} patch The patch to grow.\n * @param {string} text Source text.\n * @private\n */\ndiff_match_patch.prototype.patch_addContext_ = function(patch, text) {\n  if (text.length == 0) {\n    return;\n  }\n  if (patch.start2 === null) {\n    throw Error('patch not initialized');\n  }\n  var pattern = text.substring(patch.start2, patch.start2 + patch.length1);\n  var padding = 0;\n\n  // Look for the first and last matches of pattern in text.  If two different\n  // matches are found, increase the pattern length.\n  while (text.indexOf(pattern) != text.lastIndexOf(pattern) &&\n         pattern.length < this.Match_MaxBits - this.Patch_Margin -\n         this.Patch_Margin) {\n    padding += this.Patch_Margin;\n    pattern = text.substring(patch.start2 - padding,\n                             patch.start2 + patch.length1 + padding);\n  }\n  // Add one chunk for good luck.\n  padding += this.Patch_Margin;\n\n  // Add the prefix.\n  var prefix = text.substring(patch.start2 - padding, patch.start2);\n  if (prefix) {\n    patch.diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, prefix));\n  }\n  // Add the suffix.\n  var suffix = text.substring(patch.start2 + patch.length1,\n                              patch.start2 + patch.length1 + padding);\n  if (suffix) {\n    patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, suffix));\n  }\n\n  // Roll back the start points.\n  patch.start1 -= prefix.length;\n  patch.start2 -= prefix.length;\n  // Extend the lengths.\n  patch.length1 += prefix.length + suffix.length;\n  patch.length2 += prefix.length + suffix.length;\n};\n\n\n/**\n * Compute a list of patches to turn text1 into text2.\n * Use diffs if provided, otherwise compute it ourselves.\n * There are four ways to call this function, depending on what data is\n * available to the caller:\n * Method 1:\n * a = text1, b = text2\n * Method 2:\n * a = diffs\n * Method 3 (optimal):\n * a = text1, b = diffs\n * Method 4 (deprecated, use method 3):\n * a = text1, b = text2, c = diffs\n *\n * @param {string|!Array.<!diff_match_patch.Diff>} a text1 (methods 1,3,4) or\n * Array of diff tuples for text1 to text2 (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>=} opt_b text2 (methods 1,4) or\n * Array of diff tuples for text1 to text2 (method 3) or undefined (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>=} opt_c Array of diff tuples\n * for text1 to text2 (method 4) or undefined (methods 1,2,3).\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_make = function(a, opt_b, opt_c) {\n  var text1, diffs;\n  if (typeof a == 'string' && typeof opt_b == 'string' &&\n      typeof opt_c == 'undefined') {\n    // Method 1: text1, text2\n    // Compute diffs from text1 and text2.\n    text1 = /** @type {string} */(a);\n    diffs = this.diff_main(text1, /** @type {string} */(opt_b), true);\n    if (diffs.length > 2) {\n      this.diff_cleanupSemantic(diffs);\n      this.diff_cleanupEfficiency(diffs);\n    }\n  } else if (a && typeof a == 'object' && typeof opt_b == 'undefined' &&\n      typeof opt_c == 'undefined') {\n    // Method 2: diffs\n    // Compute text1 from diffs.\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(a);\n    text1 = this.diff_text1(diffs);\n  } else if (typeof a == 'string' && opt_b && typeof opt_b == 'object' &&\n      typeof opt_c == 'undefined') {\n    // Method 3: text1, diffs\n    text1 = /** @type {string} */(a);\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_b);\n  } else if (typeof a == 'string' && typeof opt_b == 'string' &&\n      opt_c && typeof opt_c == 'object') {\n    // Method 4: text1, text2, diffs\n    // text2 is not used.\n    text1 = /** @type {string} */(a);\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_c);\n  } else {\n    throw new Error('Unknown call format to patch_make.');\n  }\n\n  if (diffs.length === 0) {\n    return [];  // Get rid of the null case.\n  }\n  var patches = [];\n  var patch = new diff_match_patch.patch_obj();\n  var patchDiffLength = 0;  // Keeping our own length var is faster in JS.\n  var char_count1 = 0;  // Number of characters into the text1 string.\n  var char_count2 = 0;  // Number of characters into the text2 string.\n  // Start with text1 (prepatch_text) and apply the diffs until we arrive at\n  // text2 (postpatch_text).  We recreate the patches one by one to determine\n  // context info.\n  var prepatch_text = text1;\n  var postpatch_text = text1;\n  for (var x = 0; x < diffs.length; x++) {\n    var diff_type = diffs[x][0];\n    var diff_text = diffs[x][1];\n\n    if (!patchDiffLength && diff_type !== DIFF_EQUAL) {\n      // A new patch starts here.\n      patch.start1 = char_count1;\n      patch.start2 = char_count2;\n    }\n\n    switch (diff_type) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = diffs[x];\n        patch.length2 += diff_text.length;\n        postpatch_text = postpatch_text.substring(0, char_count2) + diff_text +\n                         postpatch_text.substring(char_count2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diff_text.length;\n        patch.diffs[patchDiffLength++] = diffs[x];\n        postpatch_text = postpatch_text.substring(0, char_count2) +\n                         postpatch_text.substring(char_count2 +\n                             diff_text.length);\n        break;\n      case DIFF_EQUAL:\n        if (diff_text.length <= 2 * this.Patch_Margin &&\n            patchDiffLength && diffs.length != x + 1) {\n          // Small equality inside a patch.\n          patch.diffs[patchDiffLength++] = diffs[x];\n          patch.length1 += diff_text.length;\n          patch.length2 += diff_text.length;\n        } else if (diff_text.length >= 2 * this.Patch_Margin) {\n          // Time for a new patch.\n          if (patchDiffLength) {\n            this.patch_addContext_(patch, prepatch_text);\n            patches.push(patch);\n            patch = new diff_match_patch.patch_obj();\n            patchDiffLength = 0;\n            // Unlike Unidiff, our patch lists have a rolling context.\n            // https://github.com/google/diff-match-patch/wiki/Unidiff\n            // Update prepatch text & pos to reflect the application of the\n            // just completed patch.\n            prepatch_text = postpatch_text;\n            char_count1 = char_count2;\n          }\n        }\n        break;\n    }\n\n    // Update the current character count.\n    if (diff_type !== DIFF_INSERT) {\n      char_count1 += diff_text.length;\n    }\n    if (diff_type !== DIFF_DELETE) {\n      char_count2 += diff_text.length;\n    }\n  }\n  // Pick up the leftover patch if not empty.\n  if (patchDiffLength) {\n    this.patch_addContext_(patch, prepatch_text);\n    patches.push(patch);\n  }\n\n  return patches;\n};\n\n\n/**\n * Given an array of patches, return another array that is identical.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_deepCopy = function(patches) {\n  // Making deep copies is hard in JavaScript.\n  var patchesCopy = [];\n  for (var x = 0; x < patches.length; x++) {\n    var patch = patches[x];\n    var patchCopy = new diff_match_patch.patch_obj();\n    patchCopy.diffs = [];\n    for (var y = 0; y < patch.diffs.length; y++) {\n      patchCopy.diffs[y] =\n          new diff_match_patch.Diff(patch.diffs[y][0], patch.diffs[y][1]);\n    }\n    patchCopy.start1 = patch.start1;\n    patchCopy.start2 = patch.start2;\n    patchCopy.length1 = patch.length1;\n    patchCopy.length2 = patch.length2;\n    patchesCopy[x] = patchCopy;\n  }\n  return patchesCopy;\n};\n\n\n/**\n * Merge a set of patches onto the text.  Return a patched text, as well\n * as a list of true/false values indicating which patches were applied.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @param {string} text Old text.\n * @return {!Array.<string|!Array.<boolean>>} Two element Array, containing the\n *      new text and an array of boolean values.\n */\ndiff_match_patch.prototype.patch_apply = function(patches, text) {\n  if (patches.length == 0) {\n    return [text, []];\n  }\n\n  // Deep copy the patches so that no changes are made to originals.\n  patches = this.patch_deepCopy(patches);\n\n  var nullPadding = this.patch_addPadding(patches);\n  text = nullPadding + text + nullPadding;\n\n  this.patch_splitMax(patches);\n  // delta keeps track of the offset between the expected and actual location\n  // of the previous patch.  If there are patches expected at positions 10 and\n  // 20, but the first patch was found at 12, delta is 2 and the second patch\n  // has an effective expected position of 22.\n  var delta = 0;\n  var results = [];\n  for (var x = 0; x < patches.length; x++) {\n    var expected_loc = patches[x].start2 + delta;\n    var text1 = this.diff_text1(patches[x].diffs);\n    var start_loc;\n    var end_loc = -1;\n    if (text1.length > this.Match_MaxBits) {\n      // patch_splitMax will only provide an oversized pattern in the case of\n      // a monster delete.\n      start_loc = this.match_main(text, text1.substring(0, this.Match_MaxBits),\n                                  expected_loc);\n      if (start_loc != -1) {\n        end_loc = this.match_main(text,\n            text1.substring(text1.length - this.Match_MaxBits),\n            expected_loc + text1.length - this.Match_MaxBits);\n        if (end_loc == -1 || start_loc >= end_loc) {\n          // Can't find valid trailing context.  Drop this patch.\n          start_loc = -1;\n        }\n      }\n    } else {\n      start_loc = this.match_main(text, text1, expected_loc);\n    }\n    if (start_loc == -1) {\n      // No match found.  :(\n      results[x] = false;\n      // Subtract the delta for this failed patch from subsequent patches.\n      delta -= patches[x].length2 - patches[x].length1;\n    } else {\n      // Found a match.  :)\n      results[x] = true;\n      delta = start_loc - expected_loc;\n      var text2;\n      if (end_loc == -1) {\n        text2 = text.substring(start_loc, start_loc + text1.length);\n      } else {\n        text2 = text.substring(start_loc, end_loc + this.Match_MaxBits);\n      }\n      if (text1 == text2) {\n        // Perfect match, just shove the replacement text in.\n        text = text.substring(0, start_loc) +\n               this.diff_text2(patches[x].diffs) +\n               text.substring(start_loc + text1.length);\n      } else {\n        // Imperfect match.  Run a diff to get a framework of equivalent\n        // indices.\n        var diffs = this.diff_main(text1, text2, false);\n        if (text1.length > this.Match_MaxBits &&\n            this.diff_levenshtein(diffs) / text1.length >\n            this.Patch_DeleteThreshold) {\n          // The end points match, but the content is unacceptably bad.\n          results[x] = false;\n        } else {\n          this.diff_cleanupSemanticLossless(diffs);\n          var index1 = 0;\n          var index2;\n          for (var y = 0; y < patches[x].diffs.length; y++) {\n            var mod = patches[x].diffs[y];\n            if (mod[0] !== DIFF_EQUAL) {\n              index2 = this.diff_xIndex(diffs, index1);\n            }\n            if (mod[0] === DIFF_INSERT) {  // Insertion\n              text = text.substring(0, start_loc + index2) + mod[1] +\n                     text.substring(start_loc + index2);\n            } else if (mod[0] === DIFF_DELETE) {  // Deletion\n              text = text.substring(0, start_loc + index2) +\n                     text.substring(start_loc + this.diff_xIndex(diffs,\n                         index1 + mod[1].length));\n            }\n            if (mod[0] !== DIFF_DELETE) {\n              index1 += mod[1].length;\n            }\n          }\n        }\n      }\n    }\n  }\n  // Strip the padding off.\n  text = text.substring(nullPadding.length, text.length - nullPadding.length);\n  return [text, results];\n};\n\n\n/**\n * Add some padding on text start and end so that edges can match something.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} The padding string added to each side.\n */\ndiff_match_patch.prototype.patch_addPadding = function(patches) {\n  var paddingLength = this.Patch_Margin;\n  var nullPadding = '';\n  for (var x = 1; x <= paddingLength; x++) {\n    nullPadding += String.fromCharCode(x);\n  }\n\n  // Bump all the patches forward.\n  for (var x = 0; x < patches.length; x++) {\n    patches[x].start1 += paddingLength;\n    patches[x].start2 += paddingLength;\n  }\n\n  // Add some padding on start of first diff.\n  var patch = patches[0];\n  var diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[0][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, nullPadding));\n    patch.start1 -= paddingLength;  // Should be 0.\n    patch.start2 -= paddingLength;  // Should be 0.\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[0][1].length) {\n    // Grow first equality.\n    var extraLength = paddingLength - diffs[0][1].length;\n    diffs[0][1] = nullPadding.substring(diffs[0][1].length) + diffs[0][1];\n    patch.start1 -= extraLength;\n    patch.start2 -= extraLength;\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  // Add some padding on end of last diff.\n  patch = patches[patches.length - 1];\n  diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[diffs.length - 1][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, nullPadding));\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    // Grow last equality.\n    var extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  return nullPadding;\n};\n\n\n/**\n * Look through the patches and break up any which are longer than the maximum\n * limit of the match algorithm.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_splitMax = function(patches) {\n  var patch_size = this.Match_MaxBits;\n  for (var x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patch_size) {\n      continue;\n    }\n    var bigpatch = patches[x];\n    // Remove the big old patch.\n    patches.splice(x--, 1);\n    var start1 = bigpatch.start1;\n    var start2 = bigpatch.start2;\n    var precontext = '';\n    while (bigpatch.diffs.length !== 0) {\n      // Create one of several smaller patches.\n      var patch = new diff_match_patch.patch_obj();\n      var empty = true;\n      patch.start1 = start1 - precontext.length;\n      patch.start2 = start2 - precontext.length;\n      if (precontext !== '') {\n        patch.length1 = patch.length2 = precontext.length;\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, precontext));\n      }\n      while (bigpatch.diffs.length !== 0 &&\n             patch.length1 < patch_size - this.Patch_Margin) {\n        var diff_type = bigpatch.diffs[0][0];\n        var diff_text = bigpatch.diffs[0][1];\n        if (diff_type === DIFF_INSERT) {\n          // Insertions are harmless.\n          patch.length2 += diff_text.length;\n          start2 += diff_text.length;\n          patch.diffs.push(bigpatch.diffs.shift());\n          empty = false;\n        } else if (diff_type === DIFF_DELETE && patch.diffs.length == 1 &&\n                   patch.diffs[0][0] == DIFF_EQUAL &&\n                   diff_text.length > 2 * patch_size) {\n          // This is a large deletion.  Let it pass in one chunk.\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          empty = false;\n          patch.diffs.push(new diff_match_patch.Diff(diff_type, diff_text));\n          bigpatch.diffs.shift();\n        } else {\n          // Deletion or equality.  Only take as much as we can stomach.\n          diff_text = diff_text.substring(0,\n              patch_size - patch.length1 - this.Patch_Margin);\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          if (diff_type === DIFF_EQUAL) {\n            patch.length2 += diff_text.length;\n            start2 += diff_text.length;\n          } else {\n            empty = false;\n          }\n          patch.diffs.push(new diff_match_patch.Diff(diff_type, diff_text));\n          if (diff_text == bigpatch.diffs[0][1]) {\n            bigpatch.diffs.shift();\n          } else {\n            bigpatch.diffs[0][1] =\n                bigpatch.diffs[0][1].substring(diff_text.length);\n          }\n        }\n      }\n      // Compute the head context for the next patch.\n      precontext = this.diff_text2(patch.diffs);\n      precontext =\n          precontext.substring(precontext.length - this.Patch_Margin);\n      // Append the end context for this patch.\n      var postcontext = this.diff_text1(bigpatch.diffs)\n                            .substring(0, this.Patch_Margin);\n      if (postcontext !== '') {\n        patch.length1 += postcontext.length;\n        patch.length2 += postcontext.length;\n        if (patch.diffs.length !== 0 &&\n            patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL) {\n          patch.diffs[patch.diffs.length - 1][1] += postcontext;\n        } else {\n          patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, postcontext));\n        }\n      }\n      if (!empty) {\n        patches.splice(++x, 0, patch);\n      }\n    }\n  }\n};\n\n\n/**\n * Take a list of patches and return a textual representation.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} Text representation of patches.\n */\ndiff_match_patch.prototype.patch_toText = function(patches) {\n  var text = [];\n  for (var x = 0; x < patches.length; x++) {\n    text[x] = patches[x];\n  }\n  return text.join('');\n};\n\n\n/**\n * Parse a textual representation of patches and return a list of Patch objects.\n * @param {string} textline Text representation of patches.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.patch_fromText = function(textline) {\n  var patches = [];\n  if (!textline) {\n    return patches;\n  }\n  var text = textline.split('\\n');\n  var textPointer = 0;\n  var patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\n  while (textPointer < text.length) {\n    var m = text[textPointer].match(patchHeader);\n    if (!m) {\n      throw new Error('Invalid patch string: ' + text[textPointer]);\n    }\n    var patch = new diff_match_patch.patch_obj();\n    patches.push(patch);\n    patch.start1 = parseInt(m[1], 10);\n    if (m[2] === '') {\n      patch.start1--;\n      patch.length1 = 1;\n    } else if (m[2] == '0') {\n      patch.length1 = 0;\n    } else {\n      patch.start1--;\n      patch.length1 = parseInt(m[2], 10);\n    }\n\n    patch.start2 = parseInt(m[3], 10);\n    if (m[4] === '') {\n      patch.start2--;\n      patch.length2 = 1;\n    } else if (m[4] == '0') {\n      patch.length2 = 0;\n    } else {\n      patch.start2--;\n      patch.length2 = parseInt(m[4], 10);\n    }\n    textPointer++;\n\n    while (textPointer < text.length) {\n      var sign = text[textPointer].charAt(0);\n      try {\n        var line = decodeURI(text[textPointer].substring(1));\n      } catch (ex) {\n        // Malformed URI sequence.\n        throw new Error('Illegal escape in patch_fromText: ' + line);\n      }\n      if (sign == '-') {\n        // Deletion.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_DELETE, line));\n      } else if (sign == '+') {\n        // Insertion.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_INSERT, line));\n      } else if (sign == ' ') {\n        // Minor equality.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, line));\n      } else if (sign == '@') {\n        // Start of next patch.\n        break;\n      } else if (sign === '') {\n        // Blank line?  Whatever.\n      } else {\n        // WTF?\n        throw new Error('Invalid patch mode \"' + sign + '\" in: ' + line);\n      }\n      textPointer++;\n    }\n  }\n  return patches;\n};\n\n\n/**\n * Class representing one patch operation.\n * @constructor\n */\ndiff_match_patch.patch_obj = function() {\n  /** @type {!Array.<!diff_match_patch.Diff>} */\n  this.diffs = [];\n  /** @type {?number} */\n  this.start1 = null;\n  /** @type {?number} */\n  this.start2 = null;\n  /** @type {number} */\n  this.length1 = 0;\n  /** @type {number} */\n  this.length2 = 0;\n};\n\n\n/**\n * Emulate GNU diff's format.\n * Header: @@ -382,8 +481,9 @@\n * Indices are printed as 1-based, not 0-based.\n * @return {string} The GNU diff string.\n */\ndiff_match_patch.patch_obj.prototype.toString = function() {\n  var coords1, coords2;\n  if (this.length1 === 0) {\n    coords1 = this.start1 + ',0';\n  } else if (this.length1 == 1) {\n    coords1 = this.start1 + 1;\n  } else {\n    coords1 = (this.start1 + 1) + ',' + this.length1;\n  }\n  if (this.length2 === 0) {\n    coords2 = this.start2 + ',0';\n  } else if (this.length2 == 1) {\n    coords2 = this.start2 + 1;\n  } else {\n    coords2 = (this.start2 + 1) + ',' + this.length2;\n  }\n  var text = ['@@ -' + coords1 + ' +' + coords2 + ' @@\\n'];\n  var op;\n  // Escape the body of the patch with %xx notation.\n  for (var x = 0; x < this.diffs.length; x++) {\n    switch (this.diffs[x][0]) {\n      case DIFF_INSERT:\n        op = '+';\n        break;\n      case DIFF_DELETE:\n        op = '-';\n        break;\n      case DIFF_EQUAL:\n        op = ' ';\n        break;\n    }\n    text[x + 1] = op + encodeURI(this.diffs[x][1]) + '\\n';\n  }\n  return text.join('').replace(/%20/g, ' ');\n};\n\n\n// The following export code was added by @ForbesLindesay\nmodule.exports = diff_match_patch;\nmodule.exports['diff_match_patch'] = diff_match_patch;\nmodule.exports['DIFF_DELETE'] = DIFF_DELETE;\nmodule.exports['DIFF_INSERT'] = DIFF_INSERT;\nmodule.exports['DIFF_EQUAL'] = DIFF_EQUAL;","'use strict';\n\nconst wrapAnsi16 = (fn, offset) => (...args) => {\n\tconst code = fn(...args);\n\treturn `\\u001B[${code + offset}m`;\n};\n\nconst wrapAnsi256 = (fn, offset) => (...args) => {\n\tconst code = fn(...args);\n\treturn `\\u001B[${38 + offset};5;${code}m`;\n};\n\nconst wrapAnsi16m = (fn, offset) => (...args) => {\n\tconst rgb = fn(...args);\n\treturn `\\u001B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;\n};\n\nconst ansi2ansi = n => n;\nconst rgb2rgb = (r, g, b) => [r, g, b];\n\nconst setLazyProperty = (object, property, get) => {\n\tObject.defineProperty(object, property, {\n\t\tget: () => {\n\t\t\tconst value = get();\n\n\t\t\tObject.defineProperty(object, property, {\n\t\t\t\tvalue,\n\t\t\t\tenumerable: true,\n\t\t\t\tconfigurable: true\n\t\t\t});\n\n\t\t\treturn value;\n\t\t},\n\t\tenumerable: true,\n\t\tconfigurable: true\n\t});\n};\n\n/** @type {typeof import('color-convert')} */\nlet colorConvert;\nconst makeDynamicStyles = (wrap, targetSpace, identity, isBackground) => {\n\tif (colorConvert === undefined) {\n\t\tcolorConvert = require('color-convert');\n\t}\n\n\tconst offset = isBackground ? 10 : 0;\n\tconst styles = {};\n\n\tfor (const [sourceSpace, suite] of Object.entries(colorConvert)) {\n\t\tconst name = sourceSpace === 'ansi16' ? 'ansi' : sourceSpace;\n\t\tif (sourceSpace === targetSpace) {\n\t\t\tstyles[name] = wrap(identity, offset);\n\t\t} else if (typeof suite === 'object') {\n\t\t\tstyles[name] = wrap(suite[targetSpace], offset);\n\t\t}\n\t}\n\n\treturn styles;\n};\n\nfunction assembleStyles() {\n\tconst codes = new Map();\n\tconst styles = {\n\t\tmodifier: {\n\t\t\treset: [0, 0],\n\t\t\t// 21 isn't widely supported and 22 does the same thing\n\t\t\tbold: [1, 22],\n\t\t\tdim: [2, 22],\n\t\t\titalic: [3, 23],\n\t\t\tunderline: [4, 24],\n\t\t\tinverse: [7, 27],\n\t\t\thidden: [8, 28],\n\t\t\tstrikethrough: [9, 29]\n\t\t},\n\t\tcolor: {\n\t\t\tblack: [30, 39],\n\t\t\tred: [31, 39],\n\t\t\tgreen: [32, 39],\n\t\t\tyellow: [33, 39],\n\t\t\tblue: [34, 39],\n\t\t\tmagenta: [35, 39],\n\t\t\tcyan: [36, 39],\n\t\t\twhite: [37, 39],\n\n\t\t\t// Bright color\n\t\t\tblackBright: [90, 39],\n\t\t\tredBright: [91, 39],\n\t\t\tgreenBright: [92, 39],\n\t\t\tyellowBright: [93, 39],\n\t\t\tblueBright: [94, 39],\n\t\t\tmagentaBright: [95, 39],\n\t\t\tcyanBright: [96, 39],\n\t\t\twhiteBright: [97, 39]\n\t\t},\n\t\tbgColor: {\n\t\t\tbgBlack: [40, 49],\n\t\t\tbgRed: [41, 49],\n\t\t\tbgGreen: [42, 49],\n\t\t\tbgYellow: [43, 49],\n\t\t\tbgBlue: [44, 49],\n\t\t\tbgMagenta: [45, 49],\n\t\t\tbgCyan: [46, 49],\n\t\t\tbgWhite: [47, 49],\n\n\t\t\t// Bright color\n\t\t\tbgBlackBright: [100, 49],\n\t\t\tbgRedBright: [101, 49],\n\t\t\tbgGreenBright: [102, 49],\n\t\t\tbgYellowBright: [103, 49],\n\t\t\tbgBlueBright: [104, 49],\n\t\t\tbgMagentaBright: [105, 49],\n\t\t\tbgCyanBright: [106, 49],\n\t\t\tbgWhiteBright: [107, 49]\n\t\t}\n\t};\n\n\t// Alias bright black as gray (and grey)\n\tstyles.color.gray = styles.color.blackBright;\n\tstyles.bgColor.bgGray = styles.bgColor.bgBlackBright;\n\tstyles.color.grey = styles.color.blackBright;\n\tstyles.bgColor.bgGrey = styles.bgColor.bgBlackBright;\n\n\tfor (const [groupName, group] of Object.entries(styles)) {\n\t\tfor (const [styleName, style] of Object.entries(group)) {\n\t\t\tstyles[styleName] = {\n\t\t\t\topen: `\\u001B[${style[0]}m`,\n\t\t\t\tclose: `\\u001B[${style[1]}m`\n\t\t\t};\n\n\t\t\tgroup[styleName] = styles[styleName];\n\n\t\t\tcodes.set(style[0], style[1]);\n\t\t}\n\n\t\tObject.defineProperty(styles, groupName, {\n\t\t\tvalue: group,\n\t\t\tenumerable: false\n\t\t});\n\t}\n\n\tObject.defineProperty(styles, 'codes', {\n\t\tvalue: codes,\n\t\tenumerable: false\n\t});\n\n\tstyles.color.close = '\\u001B[39m';\n\tstyles.bgColor.close = '\\u001B[49m';\n\n\tsetLazyProperty(styles.color, 'ansi', () => makeDynamicStyles(wrapAnsi16, 'ansi16', ansi2ansi, false));\n\tsetLazyProperty(styles.color, 'ansi256', () => makeDynamicStyles(wrapAnsi256, 'ansi256', ansi2ansi, false));\n\tsetLazyProperty(styles.color, 'ansi16m', () => makeDynamicStyles(wrapAnsi16m, 'rgb', rgb2rgb, false));\n\tsetLazyProperty(styles.bgColor, 'ansi', () => makeDynamicStyles(wrapAnsi16, 'ansi16', ansi2ansi, true));\n\tsetLazyProperty(styles.bgColor, 'ansi256', () => makeDynamicStyles(wrapAnsi256, 'ansi256', ansi2ansi, true));\n\tsetLazyProperty(styles.bgColor, 'ansi16m', () => makeDynamicStyles(wrapAnsi16m, 'rgb', rgb2rgb, true));\n\n\treturn styles;\n}\n\n// Make the export immutable\nObject.defineProperty(module, 'exports', {\n\tenumerable: true,\n\tget: assembleStyles\n});\n","'use strict';\nmodule.exports = {\n\tstdout: false,\n\tstderr: false\n};\n","'use strict';\n\nconst stringReplaceAll = (string, substring, replacer) => {\n\tlet index = string.indexOf(substring);\n\tif (index === -1) {\n\t\treturn string;\n\t}\n\n\tconst substringLength = substring.length;\n\tlet endIndex = 0;\n\tlet returnValue = '';\n\tdo {\n\t\treturnValue += string.substr(endIndex, index - endIndex) + substring + replacer;\n\t\tendIndex = index + substringLength;\n\t\tindex = string.indexOf(substring, endIndex);\n\t} while (index !== -1);\n\n\treturnValue += string.substr(endIndex);\n\treturn returnValue;\n};\n\nconst stringEncaseCRLFWithFirstIndex = (string, prefix, postfix, index) => {\n\tlet endIndex = 0;\n\tlet returnValue = '';\n\tdo {\n\t\tconst gotCR = string[index - 1] === '\\r';\n\t\treturnValue += string.substr(endIndex, (gotCR ? index - 1 : index) - endIndex) + prefix + (gotCR ? '\\r\\n' : '\\n') + postfix;\n\t\tendIndex = index + 1;\n\t\tindex = string.indexOf('\\n', endIndex);\n\t} while (index !== -1);\n\n\treturnValue += string.substr(endIndex);\n\treturn returnValue;\n};\n\nmodule.exports = {\n\tstringReplaceAll,\n\tstringEncaseCRLFWithFirstIndex\n};\n","'use strict';\nconst TEMPLATE_REGEX = /(?:\\\\(u(?:[a-f\\d]{4}|\\{[a-f\\d]{1,6}\\})|x[a-f\\d]{2}|.))|(?:\\{(~)?(\\w+(?:\\([^)]*\\))?(?:\\.\\w+(?:\\([^)]*\\))?)*)(?:[ \\t]|(?=\\r?\\n)))|(\\})|((?:.|[\\r\\n\\f])+?)/gi;\nconst STYLE_REGEX = /(?:^|\\.)(\\w+)(?:\\(([^)]*)\\))?/g;\nconst STRING_REGEX = /^(['\"])((?:\\\\.|(?!\\1)[^\\\\])*)\\1$/;\nconst ESCAPE_REGEX = /\\\\(u(?:[a-f\\d]{4}|\\{[a-f\\d]{1,6}\\})|x[a-f\\d]{2}|.)|([^\\\\])/gi;\n\nconst ESCAPES = new Map([\n\t['n', '\\n'],\n\t['r', '\\r'],\n\t['t', '\\t'],\n\t['b', '\\b'],\n\t['f', '\\f'],\n\t['v', '\\v'],\n\t['0', '\\0'],\n\t['\\\\', '\\\\'],\n\t['e', '\\u001B'],\n\t['a', '\\u0007']\n]);\n\nfunction unescape(c) {\n\tconst u = c[0] === 'u';\n\tconst bracket = c[1] === '{';\n\n\tif ((u && !bracket && c.length === 5) || (c[0] === 'x' && c.length === 3)) {\n\t\treturn String.fromCharCode(parseInt(c.slice(1), 16));\n\t}\n\n\tif (u && bracket) {\n\t\treturn String.fromCodePoint(parseInt(c.slice(2, -1), 16));\n\t}\n\n\treturn ESCAPES.get(c) || c;\n}\n\nfunction parseArguments(name, arguments_) {\n\tconst results = [];\n\tconst chunks = arguments_.trim().split(/\\s*,\\s*/g);\n\tlet matches;\n\n\tfor (const chunk of chunks) {\n\t\tconst number = Number(chunk);\n\t\tif (!Number.isNaN(number)) {\n\t\t\tresults.push(number);\n\t\t} else if ((matches = chunk.match(STRING_REGEX))) {\n\t\t\tresults.push(matches[2].replace(ESCAPE_REGEX, (m, escape, character) => escape ? unescape(escape) : character));\n\t\t} else {\n\t\t\tthrow new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);\n\t\t}\n\t}\n\n\treturn results;\n}\n\nfunction parseStyle(style) {\n\tSTYLE_REGEX.lastIndex = 0;\n\n\tconst results = [];\n\tlet matches;\n\n\twhile ((matches = STYLE_REGEX.exec(style)) !== null) {\n\t\tconst name = matches[1];\n\n\t\tif (matches[2]) {\n\t\t\tconst args = parseArguments(name, matches[2]);\n\t\t\tresults.push([name].concat(args));\n\t\t} else {\n\t\t\tresults.push([name]);\n\t\t}\n\t}\n\n\treturn results;\n}\n\nfunction buildStyle(chalk, styles) {\n\tconst enabled = {};\n\n\tfor (const layer of styles) {\n\t\tfor (const style of layer.styles) {\n\t\t\tenabled[style[0]] = layer.inverse ? null : style.slice(1);\n\t\t}\n\t}\n\n\tlet current = chalk;\n\tfor (const [styleName, styles] of Object.entries(enabled)) {\n\t\tif (!Array.isArray(styles)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!(styleName in current)) {\n\t\t\tthrow new Error(`Unknown Chalk style: ${styleName}`);\n\t\t}\n\n\t\tcurrent = styles.length > 0 ? current[styleName](...styles) : current[styleName];\n\t}\n\n\treturn current;\n}\n\nmodule.exports = (chalk, temporary) => {\n\tconst styles = [];\n\tconst chunks = [];\n\tlet chunk = [];\n\n\t// eslint-disable-next-line max-params\n\ttemporary.replace(TEMPLATE_REGEX, (m, escapeCharacter, inverse, style, close, character) => {\n\t\tif (escapeCharacter) {\n\t\t\tchunk.push(unescape(escapeCharacter));\n\t\t} else if (style) {\n\t\t\tconst string = chunk.join('');\n\t\t\tchunk = [];\n\t\t\tchunks.push(styles.length === 0 ? string : buildStyle(chalk, styles)(string));\n\t\t\tstyles.push({inverse, styles: parseStyle(style)});\n\t\t} else if (close) {\n\t\t\tif (styles.length === 0) {\n\t\t\t\tthrow new Error('Found extraneous } in Chalk template literal');\n\t\t\t}\n\n\t\t\tchunks.push(buildStyle(chalk, styles)(chunk.join('')));\n\t\t\tchunk = [];\n\t\t\tstyles.pop();\n\t\t} else {\n\t\t\tchunk.push(character);\n\t\t}\n\t});\n\n\tchunks.push(chunk.join(''));\n\n\tif (styles.length > 0) {\n\t\tconst errMsg = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? '' : 's'} (\\`}\\`)`;\n\t\tthrow new Error(errMsg);\n\t}\n\n\treturn chunks.join('');\n};\n","'use strict';\nconst ansiStyles = require('ansi-styles');\nconst {stdout: stdoutColor, stderr: stderrColor} = require('supports-color');\nconst {\n\tstringReplaceAll,\n\tstringEncaseCRLFWithFirstIndex\n} = require('./util');\n\n// `supportsColor.level` → `ansiStyles.color[name]` mapping\nconst levelMapping = [\n\t'ansi',\n\t'ansi',\n\t'ansi256',\n\t'ansi16m'\n];\n\nconst styles = Object.create(null);\n\nconst applyOptions = (object, options = {}) => {\n\tif (options.level > 3 || options.level < 0) {\n\t\tthrow new Error('The `level` option should be an integer from 0 to 3');\n\t}\n\n\t// Detect level if not set manually\n\tconst colorLevel = stdoutColor ? stdoutColor.level : 0;\n\tobject.level = options.level === undefined ? colorLevel : options.level;\n};\n\nclass ChalkClass {\n\tconstructor(options) {\n\t\treturn chalkFactory(options);\n\t}\n}\n\nconst chalkFactory = options => {\n\tconst chalk = {};\n\tapplyOptions(chalk, options);\n\n\tchalk.template = (...arguments_) => chalkTag(chalk.template, ...arguments_);\n\n\tObject.setPrototypeOf(chalk, Chalk.prototype);\n\tObject.setPrototypeOf(chalk.template, chalk);\n\n\tchalk.template.constructor = () => {\n\t\tthrow new Error('`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.');\n\t};\n\n\tchalk.template.Instance = ChalkClass;\n\n\treturn chalk.template;\n};\n\nfunction Chalk(options) {\n\treturn chalkFactory(options);\n}\n\nfor (const [styleName, style] of Object.entries(ansiStyles)) {\n\tstyles[styleName] = {\n\t\tget() {\n\t\t\tconst builder = createBuilder(this, createStyler(style.open, style.close, this._styler), this._isEmpty);\n\t\t\tObject.defineProperty(this, styleName, {value: builder});\n\t\t\treturn builder;\n\t\t}\n\t};\n}\n\nstyles.visible = {\n\tget() {\n\t\tconst builder = createBuilder(this, this._styler, true);\n\t\tObject.defineProperty(this, 'visible', {value: builder});\n\t\treturn builder;\n\t}\n};\n\nconst usedModels = ['rgb', 'hex', 'keyword', 'hsl', 'hsv', 'hwb', 'ansi', 'ansi256'];\n\nfor (const model of usedModels) {\n\tstyles[model] = {\n\t\tget() {\n\t\t\tconst {level} = this;\n\t\t\treturn function (...arguments_) {\n\t\t\t\tconst styler = createStyler(ansiStyles.color[levelMapping[level]][model](...arguments_), ansiStyles.color.close, this._styler);\n\t\t\t\treturn createBuilder(this, styler, this._isEmpty);\n\t\t\t};\n\t\t}\n\t};\n}\n\nfor (const model of usedModels) {\n\tconst bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);\n\tstyles[bgModel] = {\n\t\tget() {\n\t\t\tconst {level} = this;\n\t\t\treturn function (...arguments_) {\n\t\t\t\tconst styler = createStyler(ansiStyles.bgColor[levelMapping[level]][model](...arguments_), ansiStyles.bgColor.close, this._styler);\n\t\t\t\treturn createBuilder(this, styler, this._isEmpty);\n\t\t\t};\n\t\t}\n\t};\n}\n\nconst proto = Object.defineProperties(() => {}, {\n\t...styles,\n\tlevel: {\n\t\tenumerable: true,\n\t\tget() {\n\t\t\treturn this._generator.level;\n\t\t},\n\t\tset(level) {\n\t\t\tthis._generator.level = level;\n\t\t}\n\t}\n});\n\nconst createStyler = (open, close, parent) => {\n\tlet openAll;\n\tlet closeAll;\n\tif (parent === undefined) {\n\t\topenAll = open;\n\t\tcloseAll = close;\n\t} else {\n\t\topenAll = parent.openAll + open;\n\t\tcloseAll = close + parent.closeAll;\n\t}\n\n\treturn {\n\t\topen,\n\t\tclose,\n\t\topenAll,\n\t\tcloseAll,\n\t\tparent\n\t};\n};\n\nconst createBuilder = (self, _styler, _isEmpty) => {\n\tconst builder = (...arguments_) => {\n\t\t// Single argument is hot path, implicit coercion is faster than anything\n\t\t// eslint-disable-next-line no-implicit-coercion\n\t\treturn applyStyle(builder, (arguments_.length === 1) ? ('' + arguments_[0]) : arguments_.join(' '));\n\t};\n\n\t// `__proto__` is used because we must return a function, but there is\n\t// no way to create a function with a different prototype\n\tbuilder.__proto__ = proto; // eslint-disable-line no-proto\n\n\tbuilder._generator = self;\n\tbuilder._styler = _styler;\n\tbuilder._isEmpty = _isEmpty;\n\n\treturn builder;\n};\n\nconst applyStyle = (self, string) => {\n\tif (self.level <= 0 || !string) {\n\t\treturn self._isEmpty ? '' : string;\n\t}\n\n\tlet styler = self._styler;\n\n\tif (styler === undefined) {\n\t\treturn string;\n\t}\n\n\tconst {openAll, closeAll} = styler;\n\tif (string.indexOf('\\u001B') !== -1) {\n\t\twhile (styler !== undefined) {\n\t\t\t// Replace any instances already present with a re-opening code\n\t\t\t// otherwise only the part of the string until said closing code\n\t\t\t// will be colored, and the rest will simply be 'plain'.\n\t\t\tstring = stringReplaceAll(string, styler.close, styler.open);\n\n\t\t\tstyler = styler.parent;\n\t\t}\n\t}\n\n\t// We can move both next actions out of loop, because remaining actions in loop won't have\n\t// any/visible effect on parts we add here. Close the styling before a linebreak and reopen\n\t// after next line to fix a bleed issue on macOS: https://github.com/chalk/chalk/pull/92\n\tconst lfIndex = string.indexOf('\\n');\n\tif (lfIndex !== -1) {\n\t\tstring = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);\n\t}\n\n\treturn openAll + string + closeAll;\n};\n\nlet template;\nconst chalkTag = (chalk, ...strings) => {\n\tconst [firstString] = strings;\n\n\tif (!Array.isArray(firstString)) {\n\t\t// If chalk() was called by itself or with a string,\n\t\t// return the string itself as a string.\n\t\treturn strings.join(' ');\n\t}\n\n\tconst arguments_ = strings.slice(1);\n\tconst parts = [firstString.raw[0]];\n\n\tfor (let i = 1; i < firstString.length; i++) {\n\t\tparts.push(\n\t\t\tString(arguments_[i - 1]).replace(/[{}\\\\]/g, '\\\\$&'),\n\t\t\tString(firstString.raw[i])\n\t\t);\n\t}\n\n\tif (template === undefined) {\n\t\ttemplate = require('./templates');\n\t}\n\n\treturn template(chalk, parts.join(''));\n};\n\nObject.defineProperties(Chalk.prototype, styles);\n\nconst chalk = Chalk(); // eslint-disable-line new-cap\nchalk.supportsColor = stdoutColor;\nchalk.stderr = Chalk({level: stderrColor ? stderrColor.level : 0}); // eslint-disable-line new-cap\nchalk.stderr.supportsColor = stderrColor;\n\n// For TypeScript\nchalk.Level = {\n\tNone: 0,\n\tBasic: 1,\n\tAnsi256: 2,\n\tTrueColor: 3,\n\t0: 'None',\n\t1: 'Basic',\n\t2: 'Ansi256',\n\t3: 'TrueColor'\n};\n\nmodule.exports = chalk;\n","import dmp from 'diff-match-patch';\nimport chalk from 'chalk';\n\nclass Processor {\n  constructor(options) {\n    this.selfOptions = options || {};\n    this.pipes = {};\n  }\n  options(options) {\n    if (options) {\n      this.selfOptions = options;\n    }\n    return this.selfOptions;\n  }\n  pipe(name, pipeArg) {\n    let pipe = pipeArg;\n    if (typeof name === 'string') {\n      if (typeof pipe === 'undefined') {\n        return this.pipes[name];\n      } else {\n        this.pipes[name] = pipe;\n      }\n    }\n    if (name && name.name) {\n      pipe = name;\n      if (pipe.processor === this) {\n        return pipe;\n      }\n      this.pipes[pipe.name] = pipe;\n    }\n    pipe.processor = this;\n    return pipe;\n  }\n  process(input, pipe) {\n    let context = input;\n    context.options = this.options();\n    let nextPipe = pipe || input.pipe || 'default';\n    let lastPipe;\n    let lastContext;\n    while (nextPipe) {\n      if (typeof context.nextAfterChildren !== 'undefined') {\n        // children processed and coming back to parent\n        context.next = context.nextAfterChildren;\n        context.nextAfterChildren = null;\n      }\n      if (typeof nextPipe === 'string') {\n        nextPipe = this.pipe(nextPipe);\n      }\n      nextPipe.process(context);\n      lastContext = context;\n      lastPipe = nextPipe;\n      nextPipe = null;\n      if (context) {\n        if (context.next) {\n          context = context.next;\n          nextPipe = lastContext.nextPipe || context.pipe || lastPipe;\n        }\n      }\n    }\n    return context.hasResult ? context.result : undefined;\n  }\n}\n\nclass Pipe {\n  constructor(name) {\n    this.name = name;\n    this.filters = [];\n  }\n  process(input) {\n    if (!this.processor) {\n      throw new Error('add this pipe to a processor before using it');\n    }\n    const debug = this.debug;\n    const length = this.filters.length;\n    const context = input;\n    for (let index = 0; index < length; index++) {\n      const filter = this.filters[index];\n      if (debug) {\n        this.log(`filter: ${filter.filterName}`);\n      }\n      filter(context);\n      if (typeof context === 'object' && context.exiting) {\n        context.exiting = false;\n        break;\n      }\n    }\n    if (!context.next && this.resultCheck) {\n      this.resultCheck(context);\n    }\n  }\n  log(msg) {\n    console.log(`[jsondiffpatch] ${this.name} pipe, ${msg}`);\n  }\n  append() {\n    this.filters.push(...arguments);\n    return this;\n  }\n  prepend() {\n    this.filters.unshift(...arguments);\n    return this;\n  }\n  indexOf(filterName) {\n    if (!filterName) {\n      throw new Error('a filter name is required');\n    }\n    for (let index = 0; index < this.filters.length; index++) {\n      const filter = this.filters[index];\n      if (filter.filterName === filterName) {\n        return index;\n      }\n    }\n    throw new Error(`filter not found: ${filterName}`);\n  }\n  list() {\n    return this.filters.map(f => f.filterName);\n  }\n  after(filterName) {\n    const index = this.indexOf(filterName);\n    const params = Array.prototype.slice.call(arguments, 1);\n    if (!params.length) {\n      throw new Error('a filter is required');\n    }\n    params.unshift(index + 1, 0);\n    Array.prototype.splice.apply(this.filters, params);\n    return this;\n  }\n  before(filterName) {\n    const index = this.indexOf(filterName);\n    const params = Array.prototype.slice.call(arguments, 1);\n    if (!params.length) {\n      throw new Error('a filter is required');\n    }\n    params.unshift(index, 0);\n    Array.prototype.splice.apply(this.filters, params);\n    return this;\n  }\n  replace(filterName) {\n    const index = this.indexOf(filterName);\n    const params = Array.prototype.slice.call(arguments, 1);\n    if (!params.length) {\n      throw new Error('a filter is required');\n    }\n    params.unshift(index, 1);\n    Array.prototype.splice.apply(this.filters, params);\n    return this;\n  }\n  remove(filterName) {\n    const index = this.indexOf(filterName);\n    this.filters.splice(index, 1);\n    return this;\n  }\n  clear() {\n    this.filters.length = 0;\n    return this;\n  }\n  shouldHaveResult(should) {\n    if (should === false) {\n      this.resultCheck = null;\n      return;\n    }\n    if (this.resultCheck) {\n      return;\n    }\n    const pipe = this;\n    this.resultCheck = context => {\n      if (!context.hasResult) {\n        console.log(context);\n        const error = new Error(`${pipe.name} failed`);\n        error.noResult = true;\n        throw error;\n      }\n    };\n    return this;\n  }\n}\n\nclass Context {\n  setResult(result) {\n    this.result = result;\n    this.hasResult = true;\n    return this;\n  }\n  exit() {\n    this.exiting = true;\n    return this;\n  }\n  switchTo(next, pipe) {\n    if (typeof next === 'string' || next instanceof Pipe) {\n      this.nextPipe = next;\n    } else {\n      this.next = next;\n      if (pipe) {\n        this.nextPipe = pipe;\n      }\n    }\n    return this;\n  }\n  push(child, name) {\n    child.parent = this;\n    if (typeof name !== 'undefined') {\n      child.childName = name;\n    }\n    child.root = this.root || this;\n    child.options = child.options || this.options;\n    if (!this.children) {\n      this.children = [child];\n      this.nextAfterChildren = this.next || null;\n      this.next = child;\n    } else {\n      this.children[this.children.length - 1].next = child;\n      this.children.push(child);\n    }\n    child.next = this;\n    return this;\n  }\n}\n\nconst isArray$3 = typeof Array.isArray === 'function' ? Array.isArray : a => a instanceof Array;\nfunction cloneRegExp(re) {\n  const regexMatch = /^\\/(.*)\\/([gimyu]*)$/.exec(re.toString());\n  return new RegExp(regexMatch[1], regexMatch[2]);\n}\nfunction clone$1(arg) {\n  if (typeof arg !== 'object') {\n    return arg;\n  }\n  if (arg === null) {\n    return null;\n  }\n  if (isArray$3(arg)) {\n    return arg.map(clone$1);\n  }\n  if (arg instanceof Date) {\n    return new Date(arg.getTime());\n  }\n  if (arg instanceof RegExp) {\n    return cloneRegExp(arg);\n  }\n  const cloned = {};\n  for (const name in arg) {\n    if (Object.prototype.hasOwnProperty.call(arg, name)) {\n      cloned[name] = clone$1(arg[name]);\n    }\n  }\n  return cloned;\n}\n\nclass DiffContext extends Context {\n  constructor(left, right) {\n    super();\n    this.left = left;\n    this.right = right;\n    this.pipe = 'diff';\n  }\n  setResult(result) {\n    if (this.options.cloneDiffValues && typeof result === 'object') {\n      const clone = typeof this.options.cloneDiffValues === 'function' ? this.options.cloneDiffValues : clone$1;\n      if (typeof result[0] === 'object') {\n        result[0] = clone(result[0]);\n      }\n      if (typeof result[1] === 'object') {\n        result[1] = clone(result[1]);\n      }\n    }\n    return Context.prototype.setResult.apply(this, arguments);\n  }\n}\n\nclass PatchContext extends Context {\n  constructor(left, delta) {\n    super();\n    this.left = left;\n    this.delta = delta;\n    this.pipe = 'patch';\n  }\n}\n\nclass ReverseContext extends Context {\n  constructor(delta) {\n    super();\n    this.delta = delta;\n    this.pipe = 'reverse';\n  }\n}\n\nconst isArray$2 = typeof Array.isArray === 'function' ? Array.isArray : function (a) {\n  return a instanceof Array;\n};\nconst diffFilter$3 = function trivialMatchesDiffFilter(context) {\n  if (context.left === context.right) {\n    context.setResult(undefined).exit();\n    return;\n  }\n  if (typeof context.left === 'undefined') {\n    if (typeof context.right === 'function') {\n      throw new Error('functions are not supported');\n    }\n    context.setResult([context.right]).exit();\n    return;\n  }\n  if (typeof context.right === 'undefined') {\n    context.setResult([context.left, 0, 0]).exit();\n    return;\n  }\n  if (typeof context.left === 'function' || typeof context.right === 'function') {\n    throw new Error('functions are not supported');\n  }\n  context.leftType = context.left === null ? 'null' : typeof context.left;\n  context.rightType = context.right === null ? 'null' : typeof context.right;\n  if (context.leftType !== context.rightType) {\n    context.setResult([context.left, context.right]).exit();\n    return;\n  }\n  if (context.leftType === 'boolean' || context.leftType === 'number') {\n    context.setResult([context.left, context.right]).exit();\n    return;\n  }\n  if (context.leftType === 'object') {\n    context.leftIsArray = isArray$2(context.left);\n  }\n  if (context.rightType === 'object') {\n    context.rightIsArray = isArray$2(context.right);\n  }\n  if (context.leftIsArray !== context.rightIsArray) {\n    context.setResult([context.left, context.right]).exit();\n    return;\n  }\n  if (context.left instanceof RegExp) {\n    if (context.right instanceof RegExp) {\n      context.setResult([context.left.toString(), context.right.toString()]).exit();\n    } else {\n      context.setResult([context.left, context.right]).exit();\n    }\n  }\n};\ndiffFilter$3.filterName = 'trivial';\nconst patchFilter$3 = function trivialMatchesPatchFilter(context) {\n  if (typeof context.delta === 'undefined') {\n    context.setResult(context.left).exit();\n    return;\n  }\n  context.nested = !isArray$2(context.delta);\n  if (context.nested) {\n    return;\n  }\n  if (context.delta.length === 1) {\n    context.setResult(context.delta[0]).exit();\n    return;\n  }\n  if (context.delta.length === 2) {\n    if (context.left instanceof RegExp) {\n      const regexArgs = /^\\/(.*)\\/([gimyu]+)$/.exec(context.delta[1]);\n      if (regexArgs) {\n        context.setResult(new RegExp(regexArgs[1], regexArgs[2])).exit();\n        return;\n      }\n    }\n    context.setResult(context.delta[1]).exit();\n    return;\n  }\n  if (context.delta.length === 3 && context.delta[2] === 0) {\n    context.setResult(undefined).exit();\n  }\n};\npatchFilter$3.filterName = 'trivial';\nconst reverseFilter$3 = function trivialReferseFilter(context) {\n  if (typeof context.delta === 'undefined') {\n    context.setResult(context.delta).exit();\n    return;\n  }\n  context.nested = !isArray$2(context.delta);\n  if (context.nested) {\n    return;\n  }\n  if (context.delta.length === 1) {\n    context.setResult([context.delta[0], 0, 0]).exit();\n    return;\n  }\n  if (context.delta.length === 2) {\n    context.setResult([context.delta[1], context.delta[0]]).exit();\n    return;\n  }\n  if (context.delta.length === 3 && context.delta[2] === 0) {\n    context.setResult([context.delta[0]]).exit();\n  }\n};\nreverseFilter$3.filterName = 'trivial';\n\nfunction collectChildrenDiffFilter(context) {\n  if (!context || !context.children) {\n    return;\n  }\n  const length = context.children.length;\n  let child;\n  let result = context.result;\n  for (let index = 0; index < length; index++) {\n    child = context.children[index];\n    if (typeof child.result === 'undefined') {\n      continue;\n    }\n    result = result || {};\n    result[child.childName] = child.result;\n  }\n  if (result && context.leftIsArray) {\n    result._t = 'a';\n  }\n  context.setResult(result).exit();\n}\ncollectChildrenDiffFilter.filterName = 'collectChildren';\nfunction objectsDiffFilter(context) {\n  if (context.leftIsArray || context.leftType !== 'object') {\n    return;\n  }\n  let name;\n  let child;\n  const propertyFilter = context.options.propertyFilter;\n  for (name in context.left) {\n    if (!Object.prototype.hasOwnProperty.call(context.left, name)) {\n      continue;\n    }\n    if (propertyFilter && !propertyFilter(name, context)) {\n      continue;\n    }\n    child = new DiffContext(context.left[name], context.right[name]);\n    context.push(child, name);\n  }\n  for (name in context.right) {\n    if (!Object.prototype.hasOwnProperty.call(context.right, name)) {\n      continue;\n    }\n    if (propertyFilter && !propertyFilter(name, context)) {\n      continue;\n    }\n    if (typeof context.left[name] === 'undefined') {\n      child = new DiffContext(undefined, context.right[name]);\n      context.push(child, name);\n    }\n  }\n  if (!context.children || context.children.length === 0) {\n    context.setResult(undefined).exit();\n    return;\n  }\n  context.exit();\n}\nobjectsDiffFilter.filterName = 'objects';\nconst patchFilter$2 = function nestedPatchFilter(context) {\n  if (!context.nested) {\n    return;\n  }\n  if (context.delta._t) {\n    return;\n  }\n  let name;\n  let child;\n  for (name in context.delta) {\n    child = new PatchContext(context.left[name], context.delta[name]);\n    context.push(child, name);\n  }\n  context.exit();\n};\npatchFilter$2.filterName = 'objects';\nconst collectChildrenPatchFilter$1 = function collectChildrenPatchFilter(context) {\n  if (!context || !context.children) {\n    return;\n  }\n  if (context.delta._t) {\n    return;\n  }\n  const length = context.children.length;\n  let child;\n  for (let index = 0; index < length; index++) {\n    child = context.children[index];\n    if (Object.prototype.hasOwnProperty.call(context.left, child.childName) && child.result === undefined) {\n      delete context.left[child.childName];\n    } else if (context.left[child.childName] !== child.result) {\n      context.left[child.childName] = child.result;\n    }\n  }\n  context.setResult(context.left).exit();\n};\ncollectChildrenPatchFilter$1.filterName = 'collectChildren';\nconst reverseFilter$2 = function nestedReverseFilter(context) {\n  if (!context.nested) {\n    return;\n  }\n  if (context.delta._t) {\n    return;\n  }\n  let name;\n  let child;\n  for (name in context.delta) {\n    child = new ReverseContext(context.delta[name]);\n    context.push(child, name);\n  }\n  context.exit();\n};\nreverseFilter$2.filterName = 'objects';\nfunction collectChildrenReverseFilter$1(context) {\n  if (!context || !context.children) {\n    return;\n  }\n  if (context.delta._t) {\n    return;\n  }\n  const length = context.children.length;\n  let child;\n  const delta = {};\n  for (let index = 0; index < length; index++) {\n    child = context.children[index];\n    if (delta[child.childName] !== child.result) {\n      delta[child.childName] = child.result;\n    }\n  }\n  context.setResult(delta).exit();\n}\ncollectChildrenReverseFilter$1.filterName = 'collectChildren';\n\n/*\n\nLCS implementation that supports arrays or strings\n\nreference: http://en.wikipedia.org/wiki/Longest_common_subsequence_problem\n\n*/\n\nconst defaultMatch = function (array1, array2, index1, index2) {\n  return array1[index1] === array2[index2];\n};\nconst lengthMatrix = function (array1, array2, match, context) {\n  const len1 = array1.length;\n  const len2 = array2.length;\n  let x, y;\n\n  // initialize empty matrix of len1+1 x len2+1\n  const matrix = [len1 + 1];\n  for (x = 0; x < len1 + 1; x++) {\n    matrix[x] = [len2 + 1];\n    for (y = 0; y < len2 + 1; y++) {\n      matrix[x][y] = 0;\n    }\n  }\n  matrix.match = match;\n  // save sequence lengths for each coordinate\n  for (x = 1; x < len1 + 1; x++) {\n    for (y = 1; y < len2 + 1; y++) {\n      if (match(array1, array2, x - 1, y - 1, context)) {\n        matrix[x][y] = matrix[x - 1][y - 1] + 1;\n      } else {\n        matrix[x][y] = Math.max(matrix[x - 1][y], matrix[x][y - 1]);\n      }\n    }\n  }\n  return matrix;\n};\nconst backtrack = function (matrix, array1, array2, context) {\n  let index1 = array1.length;\n  let index2 = array2.length;\n  const subsequence = {\n    sequence: [],\n    indices1: [],\n    indices2: []\n  };\n  while (index1 !== 0 && index2 !== 0) {\n    const sameLetter = matrix.match(array1, array2, index1 - 1, index2 - 1, context);\n    if (sameLetter) {\n      subsequence.sequence.unshift(array1[index1 - 1]);\n      subsequence.indices1.unshift(index1 - 1);\n      subsequence.indices2.unshift(index2 - 1);\n      --index1;\n      --index2;\n    } else {\n      const valueAtMatrixAbove = matrix[index1][index2 - 1];\n      const valueAtMatrixLeft = matrix[index1 - 1][index2];\n      if (valueAtMatrixAbove > valueAtMatrixLeft) {\n        --index2;\n      } else {\n        --index1;\n      }\n    }\n  }\n  return subsequence;\n};\nconst get = function (array1, array2, match, context) {\n  const innerContext = context || {};\n  const matrix = lengthMatrix(array1, array2, match || defaultMatch, innerContext);\n  const result = backtrack(matrix, array1, array2, innerContext);\n  if (typeof array1 === 'string' && typeof array2 === 'string') {\n    result.sequence = result.sequence.join('');\n  }\n  return result;\n};\nvar lcs = {\n  get\n};\n\nconst ARRAY_MOVE = 3;\nconst isArray$1 = typeof Array.isArray === 'function' ? Array.isArray : a => a instanceof Array;\nconst arrayIndexOf = typeof Array.prototype.indexOf === 'function' ? (array, item) => array.indexOf(item) : (array, item) => {\n  const length = array.length;\n  for (let i = 0; i < length; i++) {\n    if (array[i] === item) {\n      return i;\n    }\n  }\n  return -1;\n};\nfunction arraysHaveMatchByRef(array1, array2, len1, len2) {\n  for (let index1 = 0; index1 < len1; index1++) {\n    const val1 = array1[index1];\n    for (let index2 = 0; index2 < len2; index2++) {\n      const val2 = array2[index2];\n      if (index1 !== index2 && val1 === val2) {\n        return true;\n      }\n    }\n  }\n}\nfunction matchItems(array1, array2, index1, index2, context) {\n  const value1 = array1[index1];\n  const value2 = array2[index2];\n  if (value1 === value2) {\n    return true;\n  }\n  if (typeof value1 !== 'object' || typeof value2 !== 'object') {\n    return false;\n  }\n  const objectHash = context.objectHash;\n  if (!objectHash) {\n    // no way to match objects was provided, try match by position\n    return context.matchByPosition && index1 === index2;\n  }\n  let hash1;\n  let hash2;\n  if (typeof index1 === 'number') {\n    context.hashCache1 = context.hashCache1 || [];\n    hash1 = context.hashCache1[index1];\n    if (typeof hash1 === 'undefined') {\n      context.hashCache1[index1] = hash1 = objectHash(value1, index1);\n    }\n  } else {\n    hash1 = objectHash(value1);\n  }\n  if (typeof hash1 === 'undefined') {\n    return false;\n  }\n  if (typeof index2 === 'number') {\n    context.hashCache2 = context.hashCache2 || [];\n    hash2 = context.hashCache2[index2];\n    if (typeof hash2 === 'undefined') {\n      context.hashCache2[index2] = hash2 = objectHash(value2, index2);\n    }\n  } else {\n    hash2 = objectHash(value2);\n  }\n  if (typeof hash2 === 'undefined') {\n    return false;\n  }\n  return hash1 === hash2;\n}\nconst diffFilter$2 = function arraysDiffFilter(context) {\n  if (!context.leftIsArray) {\n    return;\n  }\n  const matchContext = {\n    objectHash: context.options && context.options.objectHash,\n    matchByPosition: context.options && context.options.matchByPosition\n  };\n  let commonHead = 0;\n  let commonTail = 0;\n  let index;\n  let index1;\n  let index2;\n  const array1 = context.left;\n  const array2 = context.right;\n  const len1 = array1.length;\n  const len2 = array2.length;\n  let child;\n  if (len1 > 0 && len2 > 0 && !matchContext.objectHash && typeof matchContext.matchByPosition !== 'boolean') {\n    matchContext.matchByPosition = !arraysHaveMatchByRef(array1, array2, len1, len2);\n  }\n\n  // separate common head\n  while (commonHead < len1 && commonHead < len2 && matchItems(array1, array2, commonHead, commonHead, matchContext)) {\n    index = commonHead;\n    child = new DiffContext(context.left[index], context.right[index]);\n    context.push(child, index);\n    commonHead++;\n  }\n  // separate common tail\n  while (commonTail + commonHead < len1 && commonTail + commonHead < len2 && matchItems(array1, array2, len1 - 1 - commonTail, len2 - 1 - commonTail, matchContext)) {\n    index1 = len1 - 1 - commonTail;\n    index2 = len2 - 1 - commonTail;\n    child = new DiffContext(context.left[index1], context.right[index2]);\n    context.push(child, index2);\n    commonTail++;\n  }\n  let result;\n  if (commonHead + commonTail === len1) {\n    if (len1 === len2) {\n      // arrays are identical\n      context.setResult(undefined).exit();\n      return;\n    }\n    // trivial case, a block (1 or more consecutive items) was added\n    result = result || {\n      _t: 'a'\n    };\n    for (index = commonHead; index < len2 - commonTail; index++) {\n      result[index] = [array2[index]];\n    }\n    context.setResult(result).exit();\n    return;\n  }\n  if (commonHead + commonTail === len2) {\n    // trivial case, a block (1 or more consecutive items) was removed\n    result = result || {\n      _t: 'a'\n    };\n    for (index = commonHead; index < len1 - commonTail; index++) {\n      result[`_${index}`] = [array1[index], 0, 0];\n    }\n    context.setResult(result).exit();\n    return;\n  }\n  // reset hash cache\n  delete matchContext.hashCache1;\n  delete matchContext.hashCache2;\n\n  // diff is not trivial, find the LCS (Longest Common Subsequence)\n  const trimmed1 = array1.slice(commonHead, len1 - commonTail);\n  const trimmed2 = array2.slice(commonHead, len2 - commonTail);\n  const seq = lcs.get(trimmed1, trimmed2, matchItems, matchContext);\n  const removedItems = [];\n  result = result || {\n    _t: 'a'\n  };\n  for (index = commonHead; index < len1 - commonTail; index++) {\n    if (arrayIndexOf(seq.indices1, index - commonHead) < 0) {\n      // removed\n      result[`_${index}`] = [array1[index], 0, 0];\n      removedItems.push(index);\n    }\n  }\n  let detectMove = true;\n  if (context.options && context.options.arrays && context.options.arrays.detectMove === false) {\n    detectMove = false;\n  }\n  let includeValueOnMove = false;\n  if (context.options && context.options.arrays && context.options.arrays.includeValueOnMove) {\n    includeValueOnMove = true;\n  }\n  const removedItemsLength = removedItems.length;\n  for (index = commonHead; index < len2 - commonTail; index++) {\n    const indexOnArray2 = arrayIndexOf(seq.indices2, index - commonHead);\n    if (indexOnArray2 < 0) {\n      // added, try to match with a removed item and register as position move\n      let isMove = false;\n      if (detectMove && removedItemsLength > 0) {\n        for (let removeItemIndex1 = 0; removeItemIndex1 < removedItemsLength; removeItemIndex1++) {\n          index1 = removedItems[removeItemIndex1];\n          if (matchItems(trimmed1, trimmed2, index1 - commonHead, index - commonHead, matchContext)) {\n            // store position move as: [originalValue, newPosition, ARRAY_MOVE]\n            result[`_${index1}`].splice(1, 2, index, ARRAY_MOVE);\n            if (!includeValueOnMove) {\n              // don't include moved value on diff, to save bytes\n              result[`_${index1}`][0] = '';\n            }\n            index2 = index;\n            child = new DiffContext(context.left[index1], context.right[index2]);\n            context.push(child, index2);\n            removedItems.splice(removeItemIndex1, 1);\n            isMove = true;\n            break;\n          }\n        }\n      }\n      if (!isMove) {\n        // added\n        result[index] = [array2[index]];\n      }\n    } else {\n      // match, do inner diff\n      index1 = seq.indices1[indexOnArray2] + commonHead;\n      index2 = seq.indices2[indexOnArray2] + commonHead;\n      child = new DiffContext(context.left[index1], context.right[index2]);\n      context.push(child, index2);\n    }\n  }\n  context.setResult(result).exit();\n};\ndiffFilter$2.filterName = 'arrays';\nconst compare = {\n  numerically(a, b) {\n    return a - b;\n  },\n  numericallyBy(name) {\n    return (a, b) => a[name] - b[name];\n  }\n};\nconst patchFilter$1 = function nestedPatchFilter(context) {\n  if (!context.nested) {\n    return;\n  }\n  if (context.delta._t !== 'a') {\n    return;\n  }\n  let index;\n  let index1;\n  const delta = context.delta;\n  const array = context.left;\n\n  // first, separate removals, insertions and modifications\n  let toRemove = [];\n  let toInsert = [];\n  const toModify = [];\n  for (index in delta) {\n    if (index !== '_t') {\n      if (index[0] === '_') {\n        // removed item from original array\n        if (delta[index][2] === 0 || delta[index][2] === ARRAY_MOVE) {\n          toRemove.push(parseInt(index.slice(1), 10));\n        } else {\n          throw new Error('only removal or move can be applied at original array indices,' + ` invalid diff type: ${delta[index][2]}`);\n        }\n      } else {\n        if (delta[index].length === 1) {\n          // added item at new array\n          toInsert.push({\n            index: parseInt(index, 10),\n            value: delta[index][0]\n          });\n        } else {\n          // modified item at new array\n          toModify.push({\n            index: parseInt(index, 10),\n            delta: delta[index]\n          });\n        }\n      }\n    }\n  }\n\n  // remove items, in reverse order to avoid sawing our own floor\n  toRemove = toRemove.sort(compare.numerically);\n  for (index = toRemove.length - 1; index >= 0; index--) {\n    index1 = toRemove[index];\n    const indexDiff = delta[`_${index1}`];\n    const removedValue = array.splice(index1, 1)[0];\n    if (indexDiff[2] === ARRAY_MOVE) {\n      // reinsert later\n      toInsert.push({\n        index: indexDiff[1],\n        value: removedValue\n      });\n    }\n  }\n\n  // insert items, in reverse order to avoid moving our own floor\n  toInsert = toInsert.sort(compare.numericallyBy('index'));\n  const toInsertLength = toInsert.length;\n  for (index = 0; index < toInsertLength; index++) {\n    const insertion = toInsert[index];\n    array.splice(insertion.index, 0, insertion.value);\n  }\n\n  // apply modifications\n  const toModifyLength = toModify.length;\n  let child;\n  if (toModifyLength > 0) {\n    for (index = 0; index < toModifyLength; index++) {\n      const modification = toModify[index];\n      child = new PatchContext(context.left[modification.index], modification.delta);\n      context.push(child, modification.index);\n    }\n  }\n  if (!context.children) {\n    context.setResult(context.left).exit();\n    return;\n  }\n  context.exit();\n};\npatchFilter$1.filterName = 'arrays';\nconst collectChildrenPatchFilter = function collectChildrenPatchFilter(context) {\n  if (!context || !context.children) {\n    return;\n  }\n  if (context.delta._t !== 'a') {\n    return;\n  }\n  const length = context.children.length;\n  let child;\n  for (let index = 0; index < length; index++) {\n    child = context.children[index];\n    context.left[child.childName] = child.result;\n  }\n  context.setResult(context.left).exit();\n};\ncollectChildrenPatchFilter.filterName = 'arraysCollectChildren';\nconst reverseFilter$1 = function arraysReverseFilter(context) {\n  if (!context.nested) {\n    if (context.delta[2] === ARRAY_MOVE) {\n      context.newName = `_${context.delta[1]}`;\n      context.setResult([context.delta[0], parseInt(context.childName.substr(1), 10), ARRAY_MOVE]).exit();\n    }\n    return;\n  }\n  if (context.delta._t !== 'a') {\n    return;\n  }\n  let name;\n  let child;\n  for (name in context.delta) {\n    if (name === '_t') {\n      continue;\n    }\n    child = new ReverseContext(context.delta[name]);\n    context.push(child, name);\n  }\n  context.exit();\n};\nreverseFilter$1.filterName = 'arrays';\nconst reverseArrayDeltaIndex = (delta, index, itemDelta) => {\n  if (typeof index === 'string' && index[0] === '_') {\n    return parseInt(index.substr(1), 10);\n  } else if (isArray$1(itemDelta) && itemDelta[2] === 0) {\n    return `_${index}`;\n  }\n  let reverseIndex = +index;\n  for (const deltaIndex in delta) {\n    const deltaItem = delta[deltaIndex];\n    if (isArray$1(deltaItem)) {\n      if (deltaItem[2] === ARRAY_MOVE) {\n        const moveFromIndex = parseInt(deltaIndex.substr(1), 10);\n        const moveToIndex = deltaItem[1];\n        if (moveToIndex === +index) {\n          return moveFromIndex;\n        }\n        if (moveFromIndex <= reverseIndex && moveToIndex > reverseIndex) {\n          reverseIndex++;\n        } else if (moveFromIndex >= reverseIndex && moveToIndex < reverseIndex) {\n          reverseIndex--;\n        }\n      } else if (deltaItem[2] === 0) {\n        const deleteIndex = parseInt(deltaIndex.substr(1), 10);\n        if (deleteIndex <= reverseIndex) {\n          reverseIndex++;\n        }\n      } else if (deltaItem.length === 1 && deltaIndex <= reverseIndex) {\n        reverseIndex--;\n      }\n    }\n  }\n  return reverseIndex;\n};\nfunction collectChildrenReverseFilter(context) {\n  if (!context || !context.children) {\n    return;\n  }\n  if (context.delta._t !== 'a') {\n    return;\n  }\n  const length = context.children.length;\n  let child;\n  const delta = {\n    _t: 'a'\n  };\n  for (let index = 0; index < length; index++) {\n    child = context.children[index];\n    let name = child.newName;\n    if (typeof name === 'undefined') {\n      name = reverseArrayDeltaIndex(context.delta, child.childName, child.result);\n    }\n    if (delta[name] !== child.result) {\n      delta[name] = child.result;\n    }\n  }\n  context.setResult(delta).exit();\n}\ncollectChildrenReverseFilter.filterName = 'arraysCollectChildren';\n\nconst diffFilter$1 = function datesDiffFilter(context) {\n  if (context.left instanceof Date) {\n    if (context.right instanceof Date) {\n      if (context.left.getTime() !== context.right.getTime()) {\n        context.setResult([context.left, context.right]);\n      } else {\n        context.setResult(undefined);\n      }\n    } else {\n      context.setResult([context.left, context.right]);\n    }\n    context.exit();\n  } else if (context.right instanceof Date) {\n    context.setResult([context.left, context.right]).exit();\n  }\n};\ndiffFilter$1.filterName = 'dates';\n\n/* global diff_match_patch */\nconst TEXT_DIFF = 2;\nconst DEFAULT_MIN_LENGTH = 60;\nlet cachedDiffPatch = null;\nconst getDiffMatchPatch = function (required) {\n  /* jshint camelcase: false */\n\n  if (!cachedDiffPatch) {\n    let instance;\n    /* eslint-disable camelcase, new-cap */\n    if (typeof diff_match_patch !== 'undefined') {\n      // already loaded, probably a browser\n      instance = typeof diff_match_patch === 'function' ? new diff_match_patch() : new diff_match_patch.diff_match_patch();\n    } else if (dmp) {\n      try {\n        instance = dmp && new dmp();\n      } catch (err) {\n        instance = null;\n      }\n    }\n    /* eslint-enable camelcase, new-cap */\n    if (!instance) {\n      if (!required) {\n        return null;\n      }\n      const error = new Error('text diff_match_patch library not found');\n      // eslint-disable-next-line camelcase\n      error.diff_match_patch_not_found = true;\n      throw error;\n    }\n    cachedDiffPatch = {\n      diff: function (txt1, txt2) {\n        return instance.patch_toText(instance.patch_make(txt1, txt2));\n      },\n      patch: function (txt1, patch) {\n        const results = instance.patch_apply(instance.patch_fromText(patch), txt1);\n        for (let i = 0; i < results[1].length; i++) {\n          if (!results[1][i]) {\n            const error = new Error('text patch failed');\n            error.textPatchFailed = true;\n          }\n        }\n        return results[0];\n      }\n    };\n  }\n  return cachedDiffPatch;\n};\nconst diffFilter = function textsDiffFilter(context) {\n  if (context.leftType !== 'string') {\n    return;\n  }\n  const minLength = context.options && context.options.textDiff && context.options.textDiff.minLength || DEFAULT_MIN_LENGTH;\n  if (context.left.length < minLength || context.right.length < minLength) {\n    context.setResult([context.left, context.right]).exit();\n    return;\n  }\n  // large text, try to use a text-diff algorithm\n  const diffMatchPatch = getDiffMatchPatch();\n  if (!diffMatchPatch) {\n    // diff-match-patch library not available,\n    // fallback to regular string replace\n    context.setResult([context.left, context.right]).exit();\n    return;\n  }\n  const diff = diffMatchPatch.diff;\n  context.setResult([diff(context.left, context.right), 0, TEXT_DIFF]).exit();\n};\ndiffFilter.filterName = 'texts';\nconst patchFilter = function textsPatchFilter(context) {\n  if (context.nested) {\n    return;\n  }\n  if (context.delta[2] !== TEXT_DIFF) {\n    return;\n  }\n\n  // text-diff, use a text-patch algorithm\n  const patch = getDiffMatchPatch(true).patch;\n  context.setResult(patch(context.left, context.delta[0])).exit();\n};\npatchFilter.filterName = 'texts';\nconst textDeltaReverse = function (delta) {\n  let i;\n  let l;\n  let line;\n  let lineTmp;\n  let header = null;\n  const headerRegex = /^@@ +-(\\d+),(\\d+) +\\+(\\d+),(\\d+) +@@$/;\n  let lineHeader;\n  const lines = delta.split('\\n');\n  for (i = 0, l = lines.length; i < l; i++) {\n    line = lines[i];\n    const lineStart = line.slice(0, 1);\n    if (lineStart === '@') {\n      header = headerRegex.exec(line);\n      lineHeader = i;\n\n      // fix header\n      lines[lineHeader] = '@@ -' + header[3] + ',' + header[4] + ' +' + header[1] + ',' + header[2] + ' @@';\n    } else if (lineStart === '+') {\n      lines[i] = '-' + lines[i].slice(1);\n      if (lines[i - 1].slice(0, 1) === '+') {\n        // swap lines to keep default order (-+)\n        lineTmp = lines[i];\n        lines[i] = lines[i - 1];\n        lines[i - 1] = lineTmp;\n      }\n    } else if (lineStart === '-') {\n      lines[i] = '+' + lines[i].slice(1);\n    }\n  }\n  return lines.join('\\n');\n};\nconst reverseFilter = function textsReverseFilter(context) {\n  if (context.nested) {\n    return;\n  }\n  if (context.delta[2] !== TEXT_DIFF) {\n    return;\n  }\n\n  // text-diff, use a text-diff algorithm\n  context.setResult([textDeltaReverse(context.delta[0]), 0, TEXT_DIFF]).exit();\n};\nreverseFilter.filterName = 'texts';\n\nclass DiffPatcher {\n  constructor(options) {\n    this.processor = new Processor(options);\n    this.processor.pipe(new Pipe('diff').append(collectChildrenDiffFilter, diffFilter$3, diffFilter$1, diffFilter, objectsDiffFilter, diffFilter$2).shouldHaveResult());\n    this.processor.pipe(new Pipe('patch').append(collectChildrenPatchFilter$1, collectChildrenPatchFilter, patchFilter$3, patchFilter, patchFilter$2, patchFilter$1).shouldHaveResult());\n    this.processor.pipe(new Pipe('reverse').append(collectChildrenReverseFilter$1, collectChildrenReverseFilter, reverseFilter$3, reverseFilter, reverseFilter$2, reverseFilter$1).shouldHaveResult());\n  }\n  options() {\n    return this.processor.options(...arguments);\n  }\n  diff(left, right) {\n    return this.processor.process(new DiffContext(left, right));\n  }\n  patch(left, delta) {\n    return this.processor.process(new PatchContext(left, delta));\n  }\n  reverse(delta) {\n    return this.processor.process(new ReverseContext(delta));\n  }\n  unpatch(right, delta) {\n    return this.patch(right, this.reverse(delta));\n  }\n  clone(value) {\n    return clone$1(value);\n  }\n}\n\nconst isArray = typeof Array.isArray === 'function' ? Array.isArray : a => a instanceof Array;\nconst getObjectKeys = typeof Object.keys === 'function' ? obj => Object.keys(obj) : obj => {\n  const names = [];\n  for (const property in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, property)) {\n      names.push(property);\n    }\n  }\n  return names;\n};\nconst trimUnderscore = str => {\n  if (str.substr(0, 1) === '_') {\n    return str.slice(1);\n  }\n  return str;\n};\nconst arrayKeyToSortNumber = key => {\n  if (key === '_t') {\n    return -1;\n  } else {\n    if (key.substr(0, 1) === '_') {\n      return parseInt(key.slice(1), 10);\n    } else {\n      return parseInt(key, 10) + 0.1;\n    }\n  }\n};\nconst arrayKeyComparer = (key1, key2) => arrayKeyToSortNumber(key1) - arrayKeyToSortNumber(key2);\nclass BaseFormatter {\n  format(delta, left) {\n    const context = {};\n    this.prepareContext(context);\n    this.recurse(context, delta, left);\n    return this.finalize(context);\n  }\n  prepareContext(context) {\n    context.buffer = [];\n    context.out = function () {\n      this.buffer.push(...arguments);\n    };\n  }\n  typeFormattterNotFound(context, deltaType) {\n    throw new Error(`cannot format delta type: ${deltaType}`);\n  }\n  typeFormattterErrorFormatter(context, err) {\n    return err.toString();\n  }\n  finalize(_ref) {\n    let {\n      buffer\n    } = _ref;\n    if (isArray(buffer)) {\n      return buffer.join('');\n    }\n  }\n  recurse(context, delta, left, key, leftKey, movedFrom, isLast) {\n    const useMoveOriginHere = delta && movedFrom;\n    const leftValue = useMoveOriginHere ? movedFrom.value : left;\n    if (typeof delta === 'undefined' && typeof key === 'undefined') {\n      return undefined;\n    }\n    const type = this.getDeltaType(delta, movedFrom);\n    const nodeType = type === 'node' ? delta._t === 'a' ? 'array' : 'object' : '';\n    if (typeof key !== 'undefined') {\n      this.nodeBegin(context, key, leftKey, type, nodeType, isLast);\n    } else {\n      this.rootBegin(context, type, nodeType);\n    }\n    let typeFormattter;\n    try {\n      typeFormattter = this[`format_${type}`] || this.typeFormattterNotFound(context, type);\n      typeFormattter.call(this, context, delta, leftValue, key, leftKey, movedFrom);\n    } catch (err) {\n      this.typeFormattterErrorFormatter(context, err, delta, leftValue, key, leftKey, movedFrom);\n      if (typeof console !== 'undefined' && console.error) {\n        console.error(err.stack);\n      }\n    }\n    if (typeof key !== 'undefined') {\n      this.nodeEnd(context, key, leftKey, type, nodeType, isLast);\n    } else {\n      this.rootEnd(context, type, nodeType);\n    }\n  }\n  formatDeltaChildren(context, delta, left) {\n    const self = this;\n    this.forEachDeltaKey(delta, left, (key, leftKey, movedFrom, isLast) => {\n      self.recurse(context, delta[key], left ? left[leftKey] : undefined, key, leftKey, movedFrom, isLast);\n    });\n  }\n  forEachDeltaKey(delta, left, fn) {\n    const keys = getObjectKeys(delta);\n    const arrayKeys = delta._t === 'a';\n    const moveDestinations = {};\n    let name;\n    if (typeof left !== 'undefined') {\n      for (name in left) {\n        if (Object.prototype.hasOwnProperty.call(left, name)) {\n          if (typeof delta[name] === 'undefined' && (!arrayKeys || typeof delta[`_${name}`] === 'undefined')) {\n            keys.push(name);\n          }\n        }\n      }\n    }\n    // look for move destinations\n    for (name in delta) {\n      if (Object.prototype.hasOwnProperty.call(delta, name)) {\n        const value = delta[name];\n        if (isArray(value) && value[2] === 3) {\n          moveDestinations[value[1].toString()] = {\n            key: name,\n            value: left && left[parseInt(name.substr(1))]\n          };\n          if (this.includeMoveDestinations !== false) {\n            if (typeof left === 'undefined' && typeof delta[value[1]] === 'undefined') {\n              keys.push(value[1].toString());\n            }\n          }\n        }\n      }\n    }\n    if (arrayKeys) {\n      keys.sort(arrayKeyComparer);\n    } else {\n      keys.sort();\n    }\n    for (let index = 0, length = keys.length; index < length; index++) {\n      const key = keys[index];\n      if (arrayKeys && key === '_t') {\n        continue;\n      }\n      const leftKey = arrayKeys ? typeof key === 'number' ? key : parseInt(trimUnderscore(key), 10) : key;\n      const isLast = index === length - 1;\n      fn(key, leftKey, moveDestinations[leftKey], isLast);\n    }\n  }\n  getDeltaType(delta, movedFrom) {\n    if (typeof delta === 'undefined') {\n      if (typeof movedFrom !== 'undefined') {\n        return 'movedestination';\n      }\n      return 'unchanged';\n    }\n    if (isArray(delta)) {\n      if (delta.length === 1) {\n        return 'added';\n      }\n      if (delta.length === 2) {\n        return 'modified';\n      }\n      if (delta.length === 3 && delta[2] === 0) {\n        return 'deleted';\n      }\n      if (delta.length === 3 && delta[2] === 2) {\n        return 'textdiff';\n      }\n      if (delta.length === 3 && delta[2] === 3) {\n        return 'moved';\n      }\n    } else if (typeof delta === 'object') {\n      return 'node';\n    }\n    return 'unknown';\n  }\n  parseTextDiff(value) {\n    const output = [];\n    const lines = value.split('\\n@@ ');\n    for (let i = 0, l = lines.length; i < l; i++) {\n      const line = lines[i];\n      const lineOutput = {\n        pieces: []\n      };\n      const location = /^(?:@@ )?[-+]?(\\d+),(\\d+)/.exec(line).slice(1);\n      lineOutput.location = {\n        line: location[0],\n        chr: location[1]\n      };\n      const pieces = line.split('\\n').slice(1);\n      for (let pieceIndex = 0, piecesLength = pieces.length; pieceIndex < piecesLength; pieceIndex++) {\n        const piece = pieces[pieceIndex];\n        if (!piece.length) {\n          continue;\n        }\n        const pieceOutput = {\n          type: 'context'\n        };\n        if (piece.substr(0, 1) === '+') {\n          pieceOutput.type = 'added';\n        } else if (piece.substr(0, 1) === '-') {\n          pieceOutput.type = 'deleted';\n        }\n        pieceOutput.text = piece.slice(1);\n        lineOutput.pieces.push(pieceOutput);\n      }\n      output.push(lineOutput);\n    }\n    return output;\n  }\n}\n\nvar base = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  default: BaseFormatter\n});\n\nclass HtmlFormatter extends BaseFormatter {\n  typeFormattterErrorFormatter(context, err) {\n    context.out(`<pre class=\"jsondiffpatch-error\">${err}</pre>`);\n  }\n  formatValue(context, value) {\n    context.out(`<pre>${htmlEscape(JSON.stringify(value, null, 2))}</pre>`);\n  }\n  formatTextDiffString(context, value) {\n    const lines = this.parseTextDiff(value);\n    context.out('<ul class=\"jsondiffpatch-textdiff\">');\n    for (let i = 0, l = lines.length; i < l; i++) {\n      const line = lines[i];\n      context.out('<li><div class=\"jsondiffpatch-textdiff-location\">' + `<span class=\"jsondiffpatch-textdiff-line-number\">${line.location.line}</span><span class=\"jsondiffpatch-textdiff-char\">${line.location.chr}</span></div><div class=\"jsondiffpatch-textdiff-line\">`);\n      const pieces = line.pieces;\n      for (let pieceIndex = 0, piecesLength = pieces.length; pieceIndex < piecesLength; pieceIndex++) {\n        /* global decodeURI */\n        const piece = pieces[pieceIndex];\n        context.out(`<span class=\"jsondiffpatch-textdiff-${piece.type}\">${htmlEscape(decodeURI(piece.text))}</span>`);\n      }\n      context.out('</div></li>');\n    }\n    context.out('</ul>');\n  }\n  rootBegin(context, type, nodeType) {\n    const nodeClass = `jsondiffpatch-${type}${nodeType ? ` jsondiffpatch-child-node-type-${nodeType}` : ''}`;\n    context.out(`<div class=\"jsondiffpatch-delta ${nodeClass}\">`);\n  }\n  rootEnd(context) {\n    context.out(`</div>${context.hasArrows ? '<script type=\"text/javascript\">setTimeout(' + `${adjustArrows.toString()},10);</script>` : ''}`);\n  }\n  nodeBegin(context, key, leftKey, type, nodeType) {\n    const nodeClass = `jsondiffpatch-${type}${nodeType ? ` jsondiffpatch-child-node-type-${nodeType}` : ''}`;\n    context.out(`<li class=\"${nodeClass}\" data-key=\"${leftKey}\">` + `<div class=\"jsondiffpatch-property-name\">${leftKey}</div>`);\n  }\n  nodeEnd(context) {\n    context.out('</li>');\n  }\n\n  /* jshint camelcase: false */\n  /* eslint-disable camelcase */\n\n  format_unchanged(context, delta, left) {\n    if (typeof left === 'undefined') {\n      return;\n    }\n    context.out('<div class=\"jsondiffpatch-value\">');\n    this.formatValue(context, left);\n    context.out('</div>');\n  }\n  format_movedestination(context, delta, left) {\n    if (typeof left === 'undefined') {\n      return;\n    }\n    context.out('<div class=\"jsondiffpatch-value\">');\n    this.formatValue(context, left);\n    context.out('</div>');\n  }\n  format_node(context, delta, left) {\n    // recurse\n    const nodeType = delta._t === 'a' ? 'array' : 'object';\n    context.out(`<ul class=\"jsondiffpatch-node jsondiffpatch-node-type-${nodeType}\">`);\n    this.formatDeltaChildren(context, delta, left);\n    context.out('</ul>');\n  }\n  format_added(context, delta) {\n    context.out('<div class=\"jsondiffpatch-value\">');\n    this.formatValue(context, delta[0]);\n    context.out('</div>');\n  }\n  format_modified(context, delta) {\n    context.out('<div class=\"jsondiffpatch-value jsondiffpatch-left-value\">');\n    this.formatValue(context, delta[0]);\n    context.out('</div>' + '<div class=\"jsondiffpatch-value jsondiffpatch-right-value\">');\n    this.formatValue(context, delta[1]);\n    context.out('</div>');\n  }\n  format_deleted(context, delta) {\n    context.out('<div class=\"jsondiffpatch-value\">');\n    this.formatValue(context, delta[0]);\n    context.out('</div>');\n  }\n  format_moved(context, delta) {\n    context.out('<div class=\"jsondiffpatch-value\">');\n    this.formatValue(context, delta[0]);\n    context.out(`</div><div class=\"jsondiffpatch-moved-destination\">${delta[1]}</div>`);\n\n    // draw an SVG arrow from here to move destination\n    context.out( /* jshint multistr: true */\n    '<div class=\"jsondiffpatch-arrow\" ' + `style=\"position: relative; left: -34px;\">\n          <svg width=\"30\" height=\"60\" ` + `style=\"position: absolute; display: none;\">\n          <defs>\n              <marker id=\"markerArrow\" markerWidth=\"8\" markerHeight=\"8\"\n                 refx=\"2\" refy=\"4\"\n                     orient=\"auto\" markerUnits=\"userSpaceOnUse\">\n                  <path d=\"M1,1 L1,7 L7,4 L1,1\" style=\"fill: #339;\" />\n              </marker>\n          </defs>\n          <path d=\"M30,0 Q-10,25 26,50\"\n            style=\"stroke: #88f; stroke-width: 2px; fill: none; ` + `stroke-opacity: 0.5; marker-end: url(#markerArrow);\"\n          ></path>\n          </svg>\n      </div>`);\n    context.hasArrows = true;\n  }\n  format_textdiff(context, delta) {\n    context.out('<div class=\"jsondiffpatch-value\">');\n    this.formatTextDiffString(context, delta[0]);\n    context.out('</div>');\n  }\n}\nfunction htmlEscape(text) {\n  let html = text;\n  const replacements = [[/&/g, '&amp;'], [/</g, '&lt;'], [/>/g, '&gt;'], [/'/g, '&apos;'], [/\"/g, '&quot;']];\n  for (let i = 0; i < replacements.length; i++) {\n    html = html.replace(replacements[i][0], replacements[i][1]);\n  }\n  return html;\n}\nconst adjustArrows = function jsondiffpatchHtmlFormatterAdjustArrows(nodeArg) {\n  const node = nodeArg || document;\n  const getElementText = _ref => {\n    let {\n      textContent,\n      innerText\n    } = _ref;\n    return textContent || innerText;\n  };\n  const eachByQuery = (el, query, fn) => {\n    const elems = el.querySelectorAll(query);\n    for (let i = 0, l = elems.length; i < l; i++) {\n      fn(elems[i]);\n    }\n  };\n  const eachChildren = (_ref2, fn) => {\n    let {\n      children\n    } = _ref2;\n    for (let i = 0, l = children.length; i < l; i++) {\n      fn(children[i], i);\n    }\n  };\n  eachByQuery(node, '.jsondiffpatch-arrow', _ref3 => {\n    let {\n      parentNode,\n      children,\n      style\n    } = _ref3;\n    const arrowParent = parentNode;\n    const svg = children[0];\n    const path = svg.children[1];\n    svg.style.display = 'none';\n    const destination = getElementText(arrowParent.querySelector('.jsondiffpatch-moved-destination'));\n    const container = arrowParent.parentNode;\n    let destinationElem;\n    eachChildren(container, child => {\n      if (child.getAttribute('data-key') === destination) {\n        destinationElem = child;\n      }\n    });\n    if (!destinationElem) {\n      return;\n    }\n    try {\n      const distance = destinationElem.offsetTop - arrowParent.offsetTop;\n      svg.setAttribute('height', Math.abs(distance) + 6);\n      style.top = `${-8 + (distance > 0 ? 0 : distance)}px`;\n      const curve = distance > 0 ? `M30,0 Q-10,${Math.round(distance / 2)} 26,${distance - 4}` : `M30,${-distance} Q-10,${Math.round(-distance / 2)} 26,4`;\n      path.setAttribute('d', curve);\n      svg.style.display = '';\n    } catch (err) {}\n  });\n};\n\n/* jshint camelcase: true */\n/* eslint-enable camelcase */\n\nconst showUnchanged = (show, node, delay) => {\n  const el = node || document.body;\n  const prefix = 'jsondiffpatch-unchanged-';\n  const classes = {\n    showing: `${prefix}showing`,\n    hiding: `${prefix}hiding`,\n    visible: `${prefix}visible`,\n    hidden: `${prefix}hidden`\n  };\n  const list = el.classList;\n  if (!list) {\n    return;\n  }\n  if (!delay) {\n    list.remove(classes.showing);\n    list.remove(classes.hiding);\n    list.remove(classes.visible);\n    list.remove(classes.hidden);\n    if (show === false) {\n      list.add(classes.hidden);\n    }\n    return;\n  }\n  if (show === false) {\n    list.remove(classes.showing);\n    list.add(classes.visible);\n    setTimeout(() => {\n      list.add(classes.hiding);\n    }, 10);\n  } else {\n    list.remove(classes.hiding);\n    list.add(classes.showing);\n    list.remove(classes.hidden);\n  }\n  const intervalId = setInterval(() => {\n    adjustArrows(el);\n  }, 100);\n  setTimeout(() => {\n    list.remove(classes.showing);\n    list.remove(classes.hiding);\n    if (show === false) {\n      list.add(classes.hidden);\n      list.remove(classes.visible);\n    } else {\n      list.add(classes.visible);\n      list.remove(classes.hidden);\n    }\n    setTimeout(() => {\n      list.remove(classes.visible);\n      clearInterval(intervalId);\n    }, delay + 400);\n  }, delay);\n};\nconst hideUnchanged = (node, delay) => showUnchanged(false, node, delay);\nlet defaultInstance$4;\nfunction format$3(delta, left) {\n  if (!defaultInstance$4) {\n    defaultInstance$4 = new HtmlFormatter();\n  }\n  return defaultInstance$4.format(delta, left);\n}\n\nvar html = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  default: HtmlFormatter,\n  format: format$3,\n  hideUnchanged: hideUnchanged,\n  showUnchanged: showUnchanged\n});\n\nclass AnnotatedFormatter extends BaseFormatter {\n  constructor() {\n    super();\n    this.includeMoveDestinations = false;\n  }\n  prepareContext(context) {\n    super.prepareContext(context);\n    context.indent = function (levels) {\n      this.indentLevel = (this.indentLevel || 0) + (typeof levels === 'undefined' ? 1 : levels);\n      this.indentPad = new Array(this.indentLevel + 1).join('&nbsp;&nbsp;');\n    };\n    context.row = (json, htmlNote) => {\n      context.out('<tr><td style=\"white-space: nowrap;\">' + '<pre class=\"jsondiffpatch-annotated-indent\"' + ' style=\"display: inline-block\">');\n      context.out(context.indentPad);\n      context.out('</pre><pre style=\"display: inline-block\">');\n      context.out(json);\n      context.out('</pre></td><td class=\"jsondiffpatch-delta-note\"><div>');\n      context.out(htmlNote);\n      context.out('</div></td></tr>');\n    };\n  }\n  typeFormattterErrorFormatter(context, err) {\n    context.row('', `<pre class=\"jsondiffpatch-error\">${err}</pre>`);\n  }\n  formatTextDiffString(context, value) {\n    const lines = this.parseTextDiff(value);\n    context.out('<ul class=\"jsondiffpatch-textdiff\">');\n    for (let i = 0, l = lines.length; i < l; i++) {\n      const line = lines[i];\n      context.out('<li><div class=\"jsondiffpatch-textdiff-location\">' + `<span class=\"jsondiffpatch-textdiff-line-number\">${line.location.line}</span><span class=\"jsondiffpatch-textdiff-char\">${line.location.chr}</span></div><div class=\"jsondiffpatch-textdiff-line\">`);\n      const pieces = line.pieces;\n      for (let pieceIndex = 0, piecesLength = pieces.length; pieceIndex < piecesLength; pieceIndex++) {\n        const piece = pieces[pieceIndex];\n        context.out(`<span class=\"jsondiffpatch-textdiff-${piece.type}\">${piece.text}</span>`);\n      }\n      context.out('</div></li>');\n    }\n    context.out('</ul>');\n  }\n  rootBegin(context, type, nodeType) {\n    context.out('<table class=\"jsondiffpatch-annotated-delta\">');\n    if (type === 'node') {\n      context.row('{');\n      context.indent();\n    }\n    if (nodeType === 'array') {\n      context.row('\"_t\": \"a\",', 'Array delta (member names indicate array indices)');\n    }\n  }\n  rootEnd(context, type) {\n    if (type === 'node') {\n      context.indent(-1);\n      context.row('}');\n    }\n    context.out('</table>');\n  }\n  nodeBegin(context, key, leftKey, type, nodeType) {\n    context.row(`&quot;${key}&quot;: {`);\n    if (type === 'node') {\n      context.indent();\n    }\n    if (nodeType === 'array') {\n      context.row('\"_t\": \"a\",', 'Array delta (member names indicate array indices)');\n    }\n  }\n  nodeEnd(context, key, leftKey, type, nodeType, isLast) {\n    if (type === 'node') {\n      context.indent(-1);\n    }\n    context.row(`}${isLast ? '' : ','}`);\n  }\n\n  /* jshint camelcase: false */\n\n  /* eslint-disable camelcase */\n  format_unchanged() {}\n  format_movedestination() {}\n  format_node(context, delta, left) {\n    // recurse\n    this.formatDeltaChildren(context, delta, left);\n  }\n}\n\n/* eslint-enable camelcase */\n\nconst wrapPropertyName = name => `<pre style=\"display:inline-block\">&quot;${name}&quot;</pre>`;\nconst deltaAnnotations = {\n  added(delta, left, key, leftKey) {\n    const formatLegend = ' <pre>([newValue])</pre>';\n    if (typeof leftKey === 'undefined') {\n      return `new value${formatLegend}`;\n    }\n    if (typeof leftKey === 'number') {\n      return `insert at index ${leftKey}${formatLegend}`;\n    }\n    return `add property ${wrapPropertyName(leftKey)}${formatLegend}`;\n  },\n  modified(delta, left, key, leftKey) {\n    const formatLegend = ' <pre>([previousValue, newValue])</pre>';\n    if (typeof leftKey === 'undefined') {\n      return `modify value${formatLegend}`;\n    }\n    if (typeof leftKey === 'number') {\n      return `modify at index ${leftKey}${formatLegend}`;\n    }\n    return `modify property ${wrapPropertyName(leftKey)}${formatLegend}`;\n  },\n  deleted(delta, left, key, leftKey) {\n    const formatLegend = ' <pre>([previousValue, 0, 0])</pre>';\n    if (typeof leftKey === 'undefined') {\n      return `delete value${formatLegend}`;\n    }\n    if (typeof leftKey === 'number') {\n      return `remove index ${leftKey}${formatLegend}`;\n    }\n    return `delete property ${wrapPropertyName(leftKey)}${formatLegend}`;\n  },\n  moved(delta, left, key, leftKey) {\n    return 'move from <span title=\"(position to remove at original state)\">' + `index ${leftKey}</span> to <span title=\"(position to insert at final` + ` state)\">index ${delta[1]}</span>`;\n  },\n  textdiff(delta, left, key, leftKey) {\n    const location = typeof leftKey === 'undefined' ? '' : typeof leftKey === 'number' ? ` at index ${leftKey}` : ` at property ${wrapPropertyName(leftKey)}`;\n    return `text diff${location}, format is <a href=\"https://code.google.com/` + 'p/google-diff-match-patch/wiki/Unidiff\">a variation of Unidiff</a>';\n  }\n};\nconst formatAnyChange = function (context, delta) {\n  const deltaType = this.getDeltaType(delta);\n  const annotator = deltaAnnotations[deltaType];\n  const htmlNote = annotator && annotator.apply(annotator, Array.prototype.slice.call(arguments, 1));\n  let json = JSON.stringify(delta, null, 2);\n  if (deltaType === 'textdiff') {\n    // split text diffs lines\n    json = json.split('\\\\n').join('\\\\n\"+\\n   \"');\n  }\n  context.indent();\n  context.row(json, htmlNote);\n  context.indent(-1);\n};\n\n/* eslint-disable camelcase */\nAnnotatedFormatter.prototype.format_added = formatAnyChange;\nAnnotatedFormatter.prototype.format_modified = formatAnyChange;\nAnnotatedFormatter.prototype.format_deleted = formatAnyChange;\nAnnotatedFormatter.prototype.format_moved = formatAnyChange;\nAnnotatedFormatter.prototype.format_textdiff = formatAnyChange;\nlet defaultInstance$3;\nfunction format$2(delta, left) {\n  if (!defaultInstance$3) {\n    defaultInstance$3 = new AnnotatedFormatter();\n  }\n  return defaultInstance$3.format(delta, left);\n}\n\nvar annotated = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  default: AnnotatedFormatter,\n  format: format$2\n});\n\nconst OPERATIONS = {\n  add: 'add',\n  remove: 'remove',\n  replace: 'replace',\n  move: 'move'\n};\nclass JSONFormatter extends BaseFormatter {\n  constructor() {\n    super();\n    this.includeMoveDestinations = true;\n  }\n  prepareContext(context) {\n    super.prepareContext(context);\n    context.result = [];\n    context.path = [];\n    context.pushCurrentOp = function (obj) {\n      const {\n        op,\n        value\n      } = obj;\n      const val = {\n        op,\n        path: this.currentPath()\n      };\n      if (typeof value !== 'undefined') {\n        val.value = value;\n      }\n      this.result.push(val);\n    };\n    context.pushMoveOp = function (to) {\n      const from = this.currentPath();\n      this.result.push({\n        op: OPERATIONS.move,\n        from,\n        path: this.toPath(to)\n      });\n    };\n    context.currentPath = function () {\n      return `/${this.path.join('/')}`;\n    };\n    context.toPath = function (toPath) {\n      const to = this.path.slice();\n      to[to.length - 1] = toPath;\n      return `/${to.join('/')}`;\n    };\n  }\n  typeFormattterErrorFormatter(context, err) {\n    context.out(`[ERROR] ${err}`);\n  }\n  rootBegin() {}\n  rootEnd() {}\n  nodeBegin(_ref, key, leftKey) {\n    let {\n      path\n    } = _ref;\n    path.push(leftKey);\n  }\n  nodeEnd(_ref2) {\n    let {\n      path\n    } = _ref2;\n    path.pop();\n  }\n\n  /* jshint camelcase: false */\n  /* eslint-disable camelcase */\n\n  format_unchanged() {}\n  format_movedestination() {}\n  format_node(context, delta, left) {\n    this.formatDeltaChildren(context, delta, left);\n  }\n  format_added(context, delta) {\n    context.pushCurrentOp({\n      op: OPERATIONS.add,\n      value: delta[0]\n    });\n  }\n  format_modified(context, delta) {\n    context.pushCurrentOp({\n      op: OPERATIONS.replace,\n      value: delta[1]\n    });\n  }\n  format_deleted(context) {\n    context.pushCurrentOp({\n      op: OPERATIONS.remove\n    });\n  }\n  format_moved(context, delta) {\n    const to = delta[1];\n    context.pushMoveOp(to);\n  }\n  format_textdiff() {\n    throw new Error('Not implemented');\n  }\n  format(delta, left) {\n    const context = {};\n    this.prepareContext(context);\n    this.recurse(context, delta, left);\n    return context.result;\n  }\n}\nconst last = arr => arr[arr.length - 1];\nconst sortBy = (arr, pred) => {\n  arr.sort(pred);\n  return arr;\n};\nconst compareByIndexDesc = (indexA, indexB) => {\n  const lastA = parseInt(indexA, 10);\n  const lastB = parseInt(indexB, 10);\n  if (!(isNaN(lastA) || isNaN(lastB))) {\n    return lastB - lastA;\n  } else {\n    return 0;\n  }\n};\nconst opsByDescendingOrder = removeOps => sortBy(removeOps, (a, b) => {\n  const splitA = a.path.split('/');\n  const splitB = b.path.split('/');\n  if (splitA.length !== splitB.length) {\n    return splitA.length - splitB.length;\n  } else {\n    return compareByIndexDesc(last(splitA), last(splitB));\n  }\n});\nconst partitionOps = (arr, fns) => {\n  const initArr = Array(fns.length + 1).fill().map(() => []);\n  return arr.map(item => {\n    let position = fns.map(fn => fn(item)).indexOf(true);\n    if (position < 0) {\n      position = fns.length;\n    }\n    return {\n      item,\n      position\n    };\n  }).reduce((acc, item) => {\n    acc[item.position].push(item.item);\n    return acc;\n  }, initArr);\n};\nconst isMoveOp = _ref3 => {\n  let {\n    op\n  } = _ref3;\n  return op === 'move';\n};\nconst isRemoveOp = _ref4 => {\n  let {\n    op\n  } = _ref4;\n  return op === 'remove';\n};\nconst reorderOps = diff => {\n  const [moveOps, removedOps, restOps] = partitionOps(diff, [isMoveOp, isRemoveOp]);\n  const removeOpsReverse = opsByDescendingOrder(removedOps);\n  return [...removeOpsReverse, ...moveOps, ...restOps];\n};\nlet defaultInstance$2;\nconst format$1 = (delta, left) => {\n  if (!defaultInstance$2) {\n    defaultInstance$2 = new JSONFormatter();\n  }\n  return reorderOps(defaultInstance$2.format(delta, left));\n};\nconst log$1 = (delta, left) => {\n  console.log(format$1(delta, left));\n};\n\nvar jsonpatch = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  default: JSONFormatter,\n  format: format$1,\n  log: log$1,\n  partitionOps: partitionOps\n});\n\nfunction chalkColor(name) {\n  return chalk && chalk[name] || function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return args;\n  };\n}\nconst colors = {\n  added: chalkColor('green'),\n  deleted: chalkColor('red'),\n  movedestination: chalkColor('gray'),\n  moved: chalkColor('yellow'),\n  unchanged: chalkColor('gray'),\n  error: chalkColor('white.bgRed'),\n  textDiffLine: chalkColor('gray')\n};\nclass ConsoleFormatter extends BaseFormatter {\n  constructor() {\n    super();\n    this.includeMoveDestinations = false;\n  }\n  prepareContext(context) {\n    super.prepareContext(context);\n    context.indent = function (levels) {\n      this.indentLevel = (this.indentLevel || 0) + (typeof levels === 'undefined' ? 1 : levels);\n      this.indentPad = new Array(this.indentLevel + 1).join('  ');\n      this.outLine();\n    };\n    context.outLine = function () {\n      this.buffer.push(`\\n${this.indentPad || ''}`);\n    };\n    context.out = function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      for (let i = 0, l = args.length; i < l; i++) {\n        const lines = args[i].split('\\n');\n        let text = lines.join(`\\n${this.indentPad || ''}`);\n        if (this.color && this.color[0]) {\n          text = this.color[0](text);\n        }\n        this.buffer.push(text);\n      }\n    };\n    context.pushColor = function (color) {\n      this.color = this.color || [];\n      this.color.unshift(color);\n    };\n    context.popColor = function () {\n      this.color = this.color || [];\n      this.color.shift();\n    };\n  }\n  typeFormattterErrorFormatter(context, err) {\n    context.pushColor(colors.error);\n    context.out(`[ERROR]${err}`);\n    context.popColor();\n  }\n  formatValue(context, value) {\n    context.out(JSON.stringify(value, null, 2));\n  }\n  formatTextDiffString(context, value) {\n    const lines = this.parseTextDiff(value);\n    context.indent();\n    for (let i = 0, l = lines.length; i < l; i++) {\n      const line = lines[i];\n      context.pushColor(colors.textDiffLine);\n      context.out(`${line.location.line},${line.location.chr} `);\n      context.popColor();\n      const pieces = line.pieces;\n      for (let pieceIndex = 0, piecesLength = pieces.length; pieceIndex < piecesLength; pieceIndex++) {\n        const piece = pieces[pieceIndex];\n        context.pushColor(colors[piece.type]);\n        context.out(piece.text);\n        context.popColor();\n      }\n      if (i < l - 1) {\n        context.outLine();\n      }\n    }\n    context.indent(-1);\n  }\n  rootBegin(context, type, nodeType) {\n    context.pushColor(colors[type]);\n    if (type === 'node') {\n      context.out(nodeType === 'array' ? '[' : '{');\n      context.indent();\n    }\n  }\n  rootEnd(context, type, nodeType) {\n    if (type === 'node') {\n      context.indent(-1);\n      context.out(nodeType === 'array' ? ']' : '}');\n    }\n    context.popColor();\n  }\n  nodeBegin(context, key, leftKey, type, nodeType) {\n    context.pushColor(colors[type]);\n    context.out(`${leftKey}: `);\n    if (type === 'node') {\n      context.out(nodeType === 'array' ? '[' : '{');\n      context.indent();\n    }\n  }\n  nodeEnd(context, key, leftKey, type, nodeType, isLast) {\n    if (type === 'node') {\n      context.indent(-1);\n      context.out(nodeType === 'array' ? ']' : `}${isLast ? '' : ','}`);\n    }\n    if (!isLast) {\n      context.outLine();\n    }\n    context.popColor();\n  }\n\n  /* jshint camelcase: false */\n  /* eslint-disable camelcase */\n\n  format_unchanged(context, delta, left) {\n    if (typeof left === 'undefined') {\n      return;\n    }\n    this.formatValue(context, left);\n  }\n  format_movedestination(context, delta, left) {\n    if (typeof left === 'undefined') {\n      return;\n    }\n    this.formatValue(context, left);\n  }\n  format_node(context, delta, left) {\n    // recurse\n    this.formatDeltaChildren(context, delta, left);\n  }\n  format_added(context, delta) {\n    this.formatValue(context, delta[0]);\n  }\n  format_modified(context, delta) {\n    context.pushColor(colors.deleted);\n    this.formatValue(context, delta[0]);\n    context.popColor();\n    context.out(' => ');\n    context.pushColor(colors.added);\n    this.formatValue(context, delta[1]);\n    context.popColor();\n  }\n  format_deleted(context, delta) {\n    this.formatValue(context, delta[0]);\n  }\n  format_moved(context, delta) {\n    context.out(`==> ${delta[1]}`);\n  }\n  format_textdiff(context, delta) {\n    this.formatTextDiffString(context, delta[0]);\n  }\n}\nlet defaultInstance$1;\nconst format = (delta, left) => {\n  if (!defaultInstance$1) {\n    defaultInstance$1 = new ConsoleFormatter();\n  }\n  return defaultInstance$1.format(delta, left);\n};\nfunction log(delta, left) {\n  console.log(format(delta, left));\n}\n\nvar console$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  default: ConsoleFormatter,\n  format: format,\n  log: log\n});\n\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  annotated: annotated,\n  base: base,\n  console: console$1,\n  html: html,\n  jsonpatch: jsonpatch\n});\n\n// use as 2nd parameter for JSON.parse to revive Date instances\nfunction dateReviver(key, value) {\n  let parts;\n  if (typeof value === 'string') {\n    // eslint-disable-next-line max-len\n    parts = /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d*))?(Z|([+-])(\\d{2}):(\\d{2}))$/.exec(value);\n    if (parts) {\n      return new Date(Date.UTC(+parts[1], +parts[2] - 1, +parts[3], +parts[4], +parts[5], +parts[6], +(parts[7] || 0)));\n    }\n  }\n  return value;\n}\n\nfunction create(options) {\n  return new DiffPatcher(options);\n}\nlet defaultInstance;\nfunction diff() {\n  if (!defaultInstance) {\n    defaultInstance = new DiffPatcher();\n  }\n  return defaultInstance.diff.apply(defaultInstance, arguments);\n}\nfunction patch() {\n  if (!defaultInstance) {\n    defaultInstance = new DiffPatcher();\n  }\n  return defaultInstance.patch.apply(defaultInstance, arguments);\n}\nfunction unpatch() {\n  if (!defaultInstance) {\n    defaultInstance = new DiffPatcher();\n  }\n  return defaultInstance.unpatch.apply(defaultInstance, arguments);\n}\nfunction reverse() {\n  if (!defaultInstance) {\n    defaultInstance = new DiffPatcher();\n  }\n  return defaultInstance.reverse.apply(defaultInstance, arguments);\n}\nfunction clone() {\n  if (!defaultInstance) {\n    defaultInstance = new DiffPatcher();\n  }\n  return defaultInstance.clone.apply(defaultInstance, arguments);\n}\n\nexport { DiffPatcher, clone, console$1 as console, create, dateReviver, diff, index as formatters, patch, reverse, unpatch };\n//# sourceMappingURL=jsondiffpatch.esm.js.map\n","export var parse = function parse(json) {\n  if (json === undefined) {\n    return undefined;\n  }\n\n  try {\n    return JSON.parse(json !== null && json !== void 0 ? json : '{}');\n  } catch (err) {\n    return {};\n  }\n};\nexport var stringify = function stringify(obj) {\n  if (obj === undefined) {\n    return undefined;\n  }\n\n  if (typeof obj === 'string') {\n    obj = parse(obj);\n  }\n\n  try {\n    return JSON.stringify(obj);\n  } catch (err) {\n    return '{}';\n  }\n};","export var ADDON_ID = 'storybook/addon-redux';\nexport var STATE_ID_HISTORY = \"\".concat(ADDON_ID, \"/useState/history\");\nexport var STATE_ID_STORE = \"\".concat(ADDON_ID, \"/useState/store\");\nexport var PANEL_ID_HISTORY = \"\".concat(ADDON_ID, \"/panel/history\");\nexport var PANEL_ID_STORE = \"\".concat(ADDON_ID, \"/panel/store\");\nexport var PARAM_REDUX_MERGE_STATE = 'PARAM_REDUX_MERGE_STATE';\nexport var ARG_REDUX_PATH = 'ARG_REDUX_PATH';\nexport var ARG_REDUX_SET_STATE = 'ARG_REDUX_SET_STATE';\nexport var ACTIONS_TYPES = {\n  RESET_REDUX_TYPE: '@@WITH_RESET_REDUX',\n  MERGE_STATE_TYPE: '@@WITH_REDUX_MERGE_STATE',\n  SET_STATE_TYPE: '@@WITH_REDUX_SET_STATE',\n  SET_STATE_AT_PATH_TYPE: '@@SET_STATE_AT_PATH_TYPE'\n};\nexport var EVENTS = {\n  INIT: \"\".concat(ADDON_ID, \"/init\"),\n  ON_DISPATCH: \"\".concat(ADDON_ID, \"/on_dispatch\"),\n  SET_STATE: \"\".concat(ADDON_ID, \"/set_state\"),\n  SET_STATE_AT_PATH: \"\".concat(ADDON_ID, \"/set_state_at_path\"),\n  MERGE_STATE: \"\".concat(ADDON_ID, \"/merge_state\"),\n  DISPATCH: \"\".concat(ADDON_ID, \"/dispatch\")\n};","import { ACTIONS_TYPES } from '../constants';\nexport var resetStateAction = function resetStateAction() {\n  return {\n    type: ACTIONS_TYPES.RESET_REDUX_TYPE\n  };\n};\nexport var mergeStateAction = function mergeStateAction() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return {\n    type: ACTIONS_TYPES.MERGE_STATE_TYPE,\n    state: state\n  };\n};\nexport var setStateAction = function setStateAction(state) {\n  return {\n    type: ACTIONS_TYPES.SET_STATE_TYPE,\n    state: state\n  };\n};\nexport var setStateAtPathAction = function setStateAtPathAction(path, value) {\n  return {\n    type: ACTIONS_TYPES.SET_STATE_AT_PATH_TYPE,\n    path: path,\n    value: value\n  };\n};","function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport { ACTIONS_TYPES } from '../constants';\nimport set from '../util/set';\n\nvar mergeReducer = function mergeReducer(state, action) {\n  var rootState = state;\n  var mergeInState = action.state;\n\n  if (_typeof(rootState) === 'object') {\n    return _objectSpread(_objectSpread({}, rootState), mergeInState);\n  } else {\n    return mergeInState;\n  }\n};\n\nvar setAtPathReducer = function setAtPathReducer(state, action) {\n  return set(state, action.path, action.value);\n};\n\nvar enhanceReducer = function enhanceReducer(mainReducer) {\n  return function (state, action) {\n    switch (action.type) {\n      case ACTIONS_TYPES.MERGE_STATE_TYPE:\n        return mergeReducer(state, action);\n\n      case ACTIONS_TYPES.SET_STATE_AT_PATH_TYPE:\n        return setAtPathReducer(state, action);\n\n      case ACTIONS_TYPES.SET_STATE_TYPE:\n        if (action.state === undefined) return mainReducer(undefined, action);\n        return action.state;\n\n      case ACTIONS_TYPES.RESET_REDUX_TYPE:\n        return mainReducer(undefined, action);\n\n      default:\n        return mainReducer(state, action);\n    }\n  };\n};\n\nvar _store;\n\nexport var getStore = function getStore() {\n  return _store;\n};\n\nvar enhancer = function enhancer(createStore) {\n  return function (reducer, state) {\n    var store = createStore(enhanceReducer(reducer), state);\n\n    var enhanceDispatch = function enhanceDispatch(dispatch) {\n      return function (action) {\n        var prev = store.getState();\n        var result = dispatch(action);\n        var next = store.getState();\n        if (listener !== null) listener(action, prev, next);\n        return result;\n      };\n    };\n\n    var listener = null;\n\n    var enhancedStore = _objectSpread(_objectSpread({}, store), {}, {\n      dispatch: enhanceDispatch(store.dispatch),\n      __WITH_REDUX_ENABLED__: {\n        listenToStateChange: function listenToStateChange(l) {\n          return listener = l;\n        }\n      }\n    });\n\n    _store = enhancedStore;\n    return enhancedStore;\n  };\n};\n\nexport default enhancer;","function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useChannel } from '@storybook/addons';\nimport { STORY_CHANGED } from '@storybook/core-events';\nimport { diff as differ } from 'jsondiffpatch';\nimport { parse } from '../util/jsonHelper';\nimport { EVENTS } from '../constants';\nimport { resetStateAction, mergeStateAction, setStateAction, setStateAtPathAction } from './actionCreators';\nimport { getStore } from './enhancer';\nvar nextId = 0;\nexport default (function () {\n  return function (story) {\n    var _useChannel, _store$__WITH_REDUX_E;\n\n    var store = getStore();\n    var emit = useChannel((_useChannel = {}, _defineProperty(_useChannel, EVENTS.SET_STATE, function (stateJson) {\n      return store.dispatch(setStateAction(parse(stateJson)));\n    }), _defineProperty(_useChannel, EVENTS.SET_STATE_AT_PATH, function (path, value) {\n      return store.dispatch(setStateAtPathAction(path, value));\n    }), _defineProperty(_useChannel, EVENTS.MERGE_STATE, function (stateJson) {\n      return store.dispatch(mergeStateAction(parse(stateJson)));\n    }), _defineProperty(_useChannel, EVENTS.DISPATCH, function (action) {\n      return store.dispatch(action);\n    }), _defineProperty(_useChannel, STORY_CHANGED, function (_action) {\n      return store.dispatch(resetStateAction());\n    }), _useChannel));\n\n    var onDispatchListener = function onDispatchListener(action, prev, state) {\n      var diff = differ(prev, state);\n      var date = new Date();\n      var event = {\n        id: nextId++,\n        date: date,\n        action: action,\n        diff: JSON.stringify(diff),\n        prev: JSON.stringify(prev),\n        state: JSON.stringify(state)\n      };\n      emit(EVENTS.ON_DISPATCH, event);\n    };\n\n    var initEvent = {\n      state: JSON.stringify(store.getState())\n    };\n    emit(EVENTS.INIT, initEvent);\n    if (store.__WITH_REDUX_ENABLED__ === undefined) throw new Error('withRedux enhancer is not enabled in the store');\n    (_store$__WITH_REDUX_E = store.__WITH_REDUX_ENABLED__) === null || _store$__WITH_REDUX_E === void 0 ? void 0 : _store$__WITH_REDUX_E.listenToStateChange(onDispatchListener);\n    return story();\n  };\n});","/**\n * A decorator is a way to wrap a story in extra “rendering” functionality. Many addons define decorators\n * in order to augment stories:\n * - with extra rendering\n * - gather details about how a story is rendered\n *\n * When writing stories, decorators are typically used to wrap stories with extra markup or context mocking.\n *\n * https://storybook.js.org/docs/react/writing-stories/decorators#gatsby-focus-wrapper\n */\nimport withRedux from '../redux/withRedux';\nexport var decorators = [withRedux()];"],"names":["diff_match_patch","DIFF_DELETE","DIFF_INSERT","DIFF_EQUAL","op","text","text1","text2","opt_checklines","opt_deadline","deadline","checklines","commonlength","commonprefix","commonsuffix","diffs","longtext","shorttext","i","hm","text1_a","text1_b","text2_a","text2_b","mid_common","diffs_a","diffs_b","a","linearray","pointer","count_delete","count_insert","text_delete","text_insert","subDiff","j","text1_length","text2_length","max_d","v_offset","v_length","v1","v2","x","delta","front","k1start","k1end","k2start","k2end","d","k1","k1_offset","x1","y1","k2_offset","x2","k2","y2","y","text1a","text2a","text1b","text2b","diffsb","lineArray","lineHash","diff_linesToCharsMunge_","chars","lineStart","lineEnd","lineArrayLength","line","maxLines","chars1","chars2","pointermin","pointermax","pointermid","pointerstart","pointerend","text_length","best","length","pattern","found","dmp","diff_halfMatchI_","seed","best_common","best_longtext_a","best_longtext_b","best_shorttext_a","best_shorttext_b","prefixLength","suffixLength","hm1","hm2","changes","equalities","equalitiesLength","lastEquality","length_insertions1","length_deletions1","length_insertions2","length_deletions2","deletion","insertion","overlap_length1","overlap_length2","diff_cleanupSemanticScore_","one","two","char1","char2","nonAlphaNumeric1","nonAlphaNumeric2","whitespace1","whitespace2","lineBreak1","lineBreak2","blankLine1","blankLine2","equality1","edit","equality2","commonOffset","commonString","bestEquality1","bestEdit","bestEquality2","bestScore","score","pre_ins","pre_del","post_ins","post_del","loc","last_chars1","last_chars2","html","pattern_amp","pattern_lt","pattern_gt","pattern_para","data","levenshtein","insertions","deletions","diffsLength","tokens","param","n","s","match_bitapScore_","e","accuracy","proximity","score_threshold","best_loc","matchmask","bin_min","bin_mid","bin_max","last_rd","start","finish","rd","charMatch","patch","padding","prefix","suffix","opt_b","opt_c","patches","patchDiffLength","char_count1","char_count2","prepatch_text","postpatch_text","diff_type","diff_text","patchesCopy","patchCopy","nullPadding","results","expected_loc","start_loc","end_loc","index1","index2","mod","paddingLength","extraLength","patch_size","bigpatch","start1","start2","precontext","empty","postcontext","textline","textPointer","patchHeader","m","sign","coords1","coords2","module","wrapAnsi16","fn","offset","args","wrapAnsi256","code","wrapAnsi16m","rgb","ansi2ansi","rgb2rgb","r","g","b","setLazyProperty","object","property","get","value","colorConvert","makeDynamicStyles","wrap","targetSpace","identity","isBackground","require$$0","styles","sourceSpace","suite","name","assembleStyles","codes","groupName","group","styleName","style","browser","stringReplaceAll","string","substring","replacer","index","substringLength","endIndex","returnValue","stringEncaseCRLFWithFirstIndex","postfix","gotCR","util","TEMPLATE_REGEX","STYLE_REGEX","STRING_REGEX","ESCAPE_REGEX","ESCAPES","unescape","c","u","bracket","parseArguments","arguments_","chunks","matches","chunk","number","escape","character","parseStyle","buildStyle","chalk","enabled","layer","current","templates","temporary","escapeCharacter","inverse","close","errMsg","ansiStyles","stdoutColor","stderrColor","require$$1","require$$2","levelMapping","applyOptions","options","colorLevel","ChalkClass","chalkFactory","chalkTag","Chalk","builder","createBuilder","createStyler","usedModels","model","level","styler","bgModel","proto","open","parent","openAll","closeAll","self","_styler","_isEmpty","applyStyle","lfIndex","template","strings","firstString","parts","require$$3","source","isArray","getObjectKeys","obj","names","trimUnderscore","str","arrayKeyToSortNumber","key","arrayKeyComparer","key1","key2","BaseFormatter","left","context","deltaType","err","_ref","buffer","leftKey","movedFrom","isLast","leftValue","type","nodeType","typeFormattter","keys","arrayKeys","moveDestinations","output","lines","l","lineOutput","location","pieces","pieceIndex","piecesLength","piece","pieceOutput","AnnotatedFormatter","levels","json","htmlNote","wrapPropertyName","deltaAnnotations","formatLegend","formatAnyChange","annotator","chalkColor","_len","_key","parse","ADDON_ID","ACTIONS_TYPES","EVENTS","resetStateAction","mergeStateAction","state","setStateAction","setStateAtPathAction","path","_store","getStore","_defineProperty","useChannel","STORY_CHANGED","withRedux","story","_useChannel","store","emit","stateJson","action","_action","initEvent","decorators"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12]}